name: Backend Checks

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [black, mypy, pytest, flake8]
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip wheels
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Enable problem matchers
        continue-on-error: true
        run: |
          echo "::add-matcher::.github/matchers/error.json"
          echo "::add-matcher::.github/matchers/generic-errors.json"
          echo "::add-matcher::.github/matchers/python.json"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --prefer-binary -r requirements.txt
          pip install pytest pytest-json-report mypy black flake8 \
            types-requests types-setuptools types-PyYAML pytest-github-actions-annotate-failures

      - name: Run ${{ matrix.task }}
        run: |
          echo "::group::ðŸ”Ž Running task: ${{ matrix.task }}"
          EXIT=0
          if [ "${{ matrix.task }}" == "black" ]; then
            OUTPUT=$(black --check . --exclude '(Lib|venv|node_modules)' || true)
            if echo "$OUTPUT" | grep -q "would reformat"; then
              echo "$OUTPUT" | while read -r line; do
                FILE=$(echo $line | awk '{print $2}')
                if [ -n "$FILE" ]; then
                  echo "::error file=$FILE::Black formatting issue detected"
                fi
              done
              EXIT=1
            fi
          fi
          if [ "${{ matrix.task }}" == "mypy" ]; then
            mypy . --exclude '(Lib|venv|node_modules)' --ignore-missing-imports --show-error-codes --show-traceback | sed 's/^/::error::/' || EXIT=$?
          fi
          if [ "${{ matrix.task }}" == "pytest" ]; then
            PYTHONPATH=. pytest -vv --maxfail=1 --disable-warnings \
              --json-report --json-report-file=pytest-report.json || EXIT=$?
            if [ ! -f pytest-report.json ]; then
              echo '{}' > pytest-report.json
              echo "::warning file=backend/tests::pytest-report.json missing, test run may have crashed"
            fi
          fi
          if [ "${{ matrix.task }}" == "flake8" ]; then
            touch flake8-report.txt
            flake8 . --max-line-length=120 > flake8-report.txt || EXIT=$?
          fi
          echo "::endgroup::"
          exit $EXIT

      - name: Upload pytest results artifact
        if: always() && matrix.task == 'pytest'
        uses: actions/upload-artifact@v4
        with:
          name: backend-pytest-results
          path: pytest-report.json
          retention-days: 14

      - name: Upload flake8 report artifact
        if: always() && matrix.task == 'flake8'
        uses: actions/upload-artifact@v4
        with:
          name: backend-flake8-report
          path: flake8-report.txt
          retention-days: 14