name: Frontend Checks

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [lint, prettier, type-check, test-unit]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Cache pnpm store
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run ESLint
        if: ${{ matrix.task == 'lint' }}
        run: |
          pnpm exec eslint src v2 ops --format json --output-file eslint-output.json || true
          node Scripts/convert-eslint.js eslint-output.json eslint-report.json || echo '{"workflow":"frontend-checks","job":"lint","status":"success","errors":[],"warnings":[],"notices":[]}' > eslint-report.json
          echo "ðŸ“‚ Dumping eslint-report.json for debug"
          cat eslint-report.json || true
          mkdir -p summaries && mv eslint-report.json summaries/

      - name: Run Prettier
        if: ${{ matrix.task == 'prettier' }}
        run: |
          pnpm exec prettier --check . > prettier-output.txt 2>&1 || true
          node Scripts/convert-prettier.js prettier-output.txt prettier-report.json || echo '{"workflow":"frontend-checks","job":"prettier","status":"success","errors":[],"warnings":[],"notices":[]}' > prettier-report.json
          echo "ðŸ“‚ Dumping prettier-report.json for debug"
          cat prettier-report.json || true
          mkdir -p summaries && mv prettier-report.json summaries/

      - name: Run TypeScript type-check
        if: ${{ matrix.task == 'type-check' }}
        run: |
          pnpm exec tsc -p tsconfig.ci.json --noEmit --skipLibCheck > tsc-output.txt 2>&1 || true
          node Scripts/convert-tsc.js tsc-output.txt tsc-report.json || echo '{"workflow":"frontend-checks","job":"tsc","status":"success","errors":[],"warnings":[],"notices":[]}' > tsc-report.json
          echo "ðŸ“‚ Dumping tsc-report.json for debug"
          cat tsc-report.json || true
          mkdir -p summaries && mv tsc-report.json summaries/

      - name: Run Jest unit tests
        if: ${{ matrix.task == 'test-unit' }}
        run: |
          pnpm exec jest --coverage --json --outputFile=jest-output.json || true
          node Scripts/convert-jest.js jest-output.json jest-report.json || echo '{"workflow":"frontend-checks","job":"jest-unit","status":"success","errors":[],"warnings":[],"notices":[]}' > jest-report.json
          echo "ðŸ“‚ Dumping jest-report.json for debug"
          cat jest-report.json || true
          mkdir -p summaries && mv jest-report.json summaries/

      - name: Upload frontend summaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-partial-${{ matrix.task }}
          path: summaries/
          retention-days: 2

  package-and-upload:
    runs-on: ubuntu-latest
    needs: checks
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all frontend job artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./downloaded

      - name: Collect frontend summaries
        run: |
          mkdir -p summaries
          find downloaded -name "*-report.json" -exec cp {} summaries/ \;

      - name: Upload combined frontend summaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-summaries
          path: summaries/
          retention-days: 2