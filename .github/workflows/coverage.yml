name: Coverage

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'v2/**'
      - 'api/**'
      - 'requirements.txt'
      - 'package.json'
      - '.github/workflows/coverage.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'v2/**'
      - 'api/**'
      - 'requirements.txt'
      - 'package.json'
      - '.github/workflows/coverage.yml'
  workflow_dispatch:

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: true
      matrix:
        task: [frontend, backend]
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable problem matchers
        run: |
          echo "::add-matcher::.github/matchers/error.json"
          echo "::add-matcher::.github/matchers/python.json"
          echo "::add-matcher::.github/matchers/ts.json"

      - name: Setup Node.js (for frontend)
        if: matrix.task == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Setup Python (for backend)
        if: matrix.task == 'backend'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install frontend dependencies
        if: matrix.task == 'frontend'
        run: npm ci

      - name: Install backend dependencies
        if: matrix.task == 'backend'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-github-actions-annotate-failures

      - name: Run frontend coverage (Jest)
        if: matrix.task == 'frontend'
        run: |
          echo "::group:: Running Jest coverage"
          npm run test:ci -- --coverage --coverageReporters=text --coverageReporters=lcov || EXIT=$?
          echo "::endgroup::"
          if [ -f coverage/coverage-summary.json ]; then
            LOW_COVERAGE=$(node -e "const s=require('./coverage/coverage-summary.json'); let low=Object.entries(s.total).filter(([k,v])=>v.pct<80); if(low.length){console.log('::warning::Low coverage detected: '+JSON.stringify(low))}")
          fi
          exit ${EXIT:-0}

      - name: Run backend coverage (Pytest)
        if: matrix.task == 'backend'
        run: |
          echo "::group:: Running Pytest coverage"
          pytest --cov=api --cov-report=xml --cov-report=term-missing || EXIT=$?
          echo "::endgroup::"
          if [ -f coverage.xml ]; then
            python - <<EOF
import xml.etree.ElementTree as ET
root = ET.parse('coverage.xml').getroot()
for cls in root.findall('.//class'):
    name = cls.get('name')
    line_rate = float(cls.get('line-rate',0))
    if line_rate < 0.8:
        print(f"::warning file={name}::Low coverage ({line_rate*100:.1f}%)")
EOF
          fi
          exit ${EXIT:-0}

      - name: Upload frontend coverage
        if: matrix.task == 'frontend' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: coverage/lcov.info
          retention-days: 1

      - name: Upload backend coverage
        if: matrix.task == 'backend' && always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-backend
          path: coverage.xml
          retention-days: 1

  upload-codecov:
    needs: coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info,./coverage.xml
          fail_ci_if_error: false