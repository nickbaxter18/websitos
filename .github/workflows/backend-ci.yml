name: Backend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        task: [black, mypy, pytest]
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Enable problem matchers
        run: |
          echo "::add-matcher::.github/matchers/error.json"
          echo "::add-matcher::.github/matchers/python.json"
          echo "::add-matcher::.github/matchers/git.json"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-json-report mypy black types-requests types-setuptools types-PyYAML pytest-github-actions-annotate-failures || true

      - name: Run ${{ matrix.task }}
        run: |
          echo "::group::ðŸ”Ž Running task: ${{ matrix.task }}"
          if [ "${{ matrix.task }}" == "black" ]; then
            OUTPUT=$(black --check . --exclude '(Lib|venv|node_modules)' || true)
            if echo "$OUTPUT" | grep -q "would reformat"; then
              echo "$OUTPUT" | while read -r line; do
                FILE=$(echo $line | awk '{print $2}')
                if [ -n "$FILE" ]; then
                  echo "::error file=$FILE::Black formatting issue detected"
                fi
              done
              exit 1
            fi
          fi
          if [ "${{ matrix.task }}" == "mypy" ]; then
            mypy . --exclude '(Lib|venv|node_modules)' --ignore-missing-imports --show-error-codes --show-traceback | sed 's/^/::error::/' || EXIT=$?
          fi
          if [ "${{ matrix.task }}" == "pytest" ]; then
            pytest -vv --maxfail=1 --disable-warnings --json-report --json-report-file=pytest-report.json || EXIT=$?
            if [ ! -f pytest-report.json ]; then
              echo '{}' > pytest-report.json
              echo "::warning file=backend/tests::pytest-report.json missing, test run may have crashed"
            fi
          fi
          echo "::endgroup::"
          exit ${EXIT:-0}
        continue-on-error: ${{ matrix.task == 'black' }}

      - name: Upload pytest results artifact
        if: always() && matrix.task == 'pytest'
        uses: actions/upload-artifact@v4
        with:
          name: backend-pytest-results
          path: pytest-report.json
          retention-days: 7

  capture-failure:
    if: always()
    needs: [checks]
    uses: ./actions/capture-failure-summary