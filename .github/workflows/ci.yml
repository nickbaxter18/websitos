name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # ----------------------
  # Lint & Format Check
  # ----------------------
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install Node deps
        run: npm ci
        env:
          HUSKY: 0 # Disable Husky in CI

      - name: ESLint check
        run: npm run lint

      - name: Prettier check
        run: npm run format:check

  # ----------------------
  # Build & Test
  # ----------------------
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        language: [node, python]

    steps:
      - uses: actions/checkout@v4

      # Node.js frontend build
      - name: Setup Node.js
        if: matrix.language == 'node'
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install Node deps
        if: matrix.language == 'node'
        run: npm ci
        env:
          HUSKY: 0

      - name: Type-check (TS)
        if: matrix.language == 'node'
        run: npm run type-check

      - name: Run Jest with coverage + JSON report
        if: matrix.language == 'node'
        run: npx jest --json --outputFile=jest-report.json --coverage --coverageReporters=json-summary --coverageReporters=lcov

      - name: Enforce Coverage Threshold
        if: matrix.language == 'node'
        run: |
          COVERAGE=$(npx jest --coverage --coverageReporters=text-summary | grep 'All files' | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $COVERAGE%"
          if [ "$COVERAGE" -lt 80 ]; then
            echo "❌ Coverage below 80%"
            exit 1
          else
            echo "✅ Coverage above threshold"
          fi

      - name: Build frontend
        if: matrix.language == 'node'
        run: npm run build

      - name: Move frontend into backend
        if: matrix.language == 'node'
        run: |
          mkdir -p backend/static
          cp -r dist/* backend/static/

      # Python backend
      - name: Setup Python
        if: matrix.language == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install Python deps
        if: matrix.language == 'python'
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-json-report pytest-cov

      - name: Run pytest with coverage + JSON report
        if: matrix.language == 'python'
        run: |
          PYTHONPATH=. pytest --maxfail=1 --disable-warnings -q \
            --json-report --json-report-file=pytest-report.json \
            --cov=. --cov-report=xml

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-artifacts
          path: |
            jest-report.json
            pytest-report.json
            coverage/
            coverage.xml

  # ----------------------
  # Deploy (Render)
  # ----------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [lint-format, build]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Render (FastAPI + static frontend)
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{"serviceId":"${{ secrets.RENDER_SERVICE_ID }}"}' \
            https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys

      - name: Refresh Qdrant collections
        if: success() && env.QDRANT_HOST != ''
        run: |
          curl -X POST \
            -H "api-key: ${{ secrets.QDRANT_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://${{ secrets.QDRANT_HOST }}/collections/_reload"
