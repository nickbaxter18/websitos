name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # -------------------
  # Lint & Format Check
  # -------------------
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Frontend lint / type-check
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.0"
          cache: "npm"

      - name: Install Node deps
        run: npm ci
        env:
          HUSKY: 0  # Disable Husky in CI

      - name: ESLint check
        run: npm run lint

      - name: Prettier check
        run: npx prettier --check .

      - name: TypeScript check
        run: npx tsc --noEmit

      # Backend lint
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install Python lint deps
        run: pip install ruff

      - name: Ruff lint check
        run: ruff check .

  # -------------------
  # Frontend Tests
  # -------------------
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.19.0"
          cache: "npm"

      - name: Install Node deps
        run: npm ci
        env:
          HUSKY: 0

      - name: Run Jest with coverage + JSON report
        run: npm run test -- --json --outputFile=jest-report.json --coverage --coverageReporters=json-summary --coverageReporters=lcov

      - name: Enforce Node Coverage Threshold (25%)
        run: |
          COVERAGE=$(npx jest --coverage --coverageReporters=text-summary | grep 'All files' | awk '{print $3}' | sed 's/%//')
          echo "Node Coverage: $COVERAGE%"
          if [ "$COVERAGE" -lt 25 ]; then
            echo "❌ Node coverage below 25%"
            exit 1
          else
            echo "✅ Node coverage above threshold"
          fi

      - name: Build frontend
        run: npm run build

      - name: Move frontend into backend
        run: |
          mkdir -p backend/static
          cp -r dist/* backend/static/

      - name: Upload frontend artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            jest-report.json
            coverage/
            coverage/lcov.info
          if-no-files-found: error

  # -------------------
  # Backend Tests (Python matrix: 3.10, 3.11)
  # -------------------
  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.10", "3.11" ]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install Python deps
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-json-report pytest-cov coverage

      - name: Run pytest with coverage + JSON report
        run: |
          PYTHONPATH=. pytest tests --maxfail=1 --disable-warnings -q \
            --json-report --json-report-file=pytest-report.json \
            --cov=. --cov-report=xml --cov-report=term

      - name: Enforce Python Coverage Threshold (25%)
        run: |
          TOTAL=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          echo "Python Coverage: $TOTAL%"
          if [ "$TOTAL" -lt 25 ]; then
            echo "❌ Python coverage below 25%"
            exit 1
          else
            echo "✅ Python coverage above threshold"
          fi

      - name: Upload backend artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-${{ matrix.python-version }}
          path: |
            pytest-report.json
            coverage.xml
          if-no-files-found: error

  # -------------------
  # Merge Coverage
  # -------------------
  build-check:
    runs-on: ubuntu-latest
    needs: [lint-format, frontend-tests, backend-tests]
    steps:
      - uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: coverage-frontend

      - name: Download backend 3.10 artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-3.10
          path: coverage-backend-3_10

      - name: Download backend 3.11 artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage-3.11
          path: coverage-backend-3_11

      - name: Merge coverage reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
        with:
          reports: |
            coverage-frontend/coverage/lcov.info;
            coverage-backend-3_10/coverage.xml;
            coverage-backend-3_11/coverage.xml
          targetdir: merged-coverage
          reporttypes: Html;Cobertura

      - name: Upload merged coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage
          path: merged-coverage/

  # -------------------
  # OpsPipeline (PowerShell Gates)
  # -------------------
  ops-pipeline:
    runs-on: windows-latest
    needs: [build-check]
    steps:
      - uses: actions/checkout@v4

      # pwsh is preinstalled on runners; just use it.
      - name: Run OpsPipeline
        shell: pwsh
        run: |
          pwsh -v
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass
          if (-not (Test-Path .\OpsPipeline.ps1)) {
            Write-Error "OpsPipeline.ps1 not found at repo root"
            exit 1
          }
          .\OpsPipeline.ps1 -FailFast

  # -------------------
  # Deploy (Render)
  # -------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [ops-pipeline]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Render (FastAPI + static frontend)
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl --fail -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{}'

      - name: Refresh Qdrant collections (optional)
        run: |
          if [ -n "${{ secrets.QDRANT_HOST }}" ] && [ -n "${{ secrets.QDRANT_API_KEY }}" ]; then
            echo "Refreshing Qdrant collections…"
            curl --fail -X POST \
              -H "api-key: ${{ secrets.QDRANT_API_KEY }}" \
              -H "Content-Type: application/json" \
              "https://${{ secrets.QDRANT_HOST }}/collections/_reload"
          else
            echo "Qdrant secrets not set—skipping."
          fi
