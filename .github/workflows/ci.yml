name: CI

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

permissions:
  checks: write
  contents: read
  actions: read

jobs:
  # ---------------------------
  # Frontend Jobs
  # ---------------------------
  frontend-checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [lint, prettier, type-check, test-unit, test-e2e]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 10
      - uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
      - run: pnpm install --frozen-lockfile

      - name: Run ESLint
        if: ${{ matrix.task == 'lint' }}
        run: |
          pnpm exec eslint src v2 ops --format json --output-file eslint-output.json || true
          node Scripts/convert-eslint.js eslint-output.json eslint-report.json || echo '{"workflow":"frontend-checks","job":"lint","status":"success","errors":[],"warnings":[],"notices":[]}' > eslint-report.json
          mkdir -p summaries && mv eslint-report.json summaries/

      - name: Run Prettier
        if: ${{ matrix.task == 'prettier' }}
        run: |
          pnpm exec prettier --check . > prettier-output.txt 2>&1 || true
          node Scripts/convert-prettier.js prettier-output.txt prettier-report.json || echo '{"workflow":"frontend-checks","job":"prettier","status":"success","errors":[],"warnings":[],"notices":[]}' > prettier-report.json
          mkdir -p summaries && mv prettier-report.json summaries/

      - name: Run TypeScript type-check
        if: ${{ matrix.task == 'type-check' }}
        run: |
          pnpm exec tsc -p tsconfig.ci.json --noEmit --skipLibCheck > tsc-output.txt 2>&1 || true
          node Scripts/convert-tsc.js tsc-output.txt tsc-report.json || echo '{"workflow":"frontend-checks","job":"tsc","status":"success","errors":[],"warnings":[],"notices":[]}' > tsc-report.json
          mkdir -p summaries && mv tsc-report.json summaries/

      - name: Run Jest unit tests
        if: ${{ matrix.task == 'test-unit' }}
        run: |
          pnpm exec jest --coverage --json --outputFile=jest-output.json || true
          node Scripts/convert-jest.js jest-output.json jest-report.json || echo '{"workflow":"frontend-checks","job":"jest-unit","status":"success","errors":[],"warnings":[],"notices":[]}' > jest-report.json
          mkdir -p summaries && mv jest-report.json summaries/

      - name: Run Playwright E2E tests
        if: ${{ matrix.task == 'test-e2e' }}
        run: |
          pnpm exec playwright install --with-deps
          pnpm exec nyc --reporter=lcov --report-dir=coverage/e2e pnpm exec playwright test || true
          node Scripts/convert-jest-coverage.js coverage/e2e/coverage-summary.json playwright-coverage-report.json || echo '{"workflow":"frontend-checks","job":"playwright-e2e","status":"success","errors":[],"warnings":[],"notices":[]}' > playwright-coverage-report.json
          mkdir -p summaries && mv playwright-coverage-report.json summaries/

      - name: Upload partial frontend summaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-partial-${{ matrix.task }}
          path: summaries/
          retention-days: 2

  frontend-package:
    runs-on: ubuntu-latest
    needs: frontend-checks
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./downloaded
      - run: |
          mkdir -p summaries
          find downloaded -name "*-report.json" -exec cp {} summaries/ \;
          echo "ðŸ“‚ Collected frontend files:" && ls -R summaries
      - uses: actions/upload-artifact@v4
        with:
          name: frontend-summaries
          path: summaries/
          retention-days: 2

  # ---------------------------
  # Backend Jobs
  # ---------------------------
  backend-checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [black, mypy, pytest, flake8]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pytest-json-report flake8 mypy black

      - name: Run Pytest
        if: ${{ matrix.task == 'pytest' }}
        run: |
          pytest --maxfail=1 --disable-warnings -q --json-report --json-report-file=pytest-output.json || true
          python Scripts/convert_pytest.py pytest-output.json pytest-report.json || echo '{"workflow":"backend-checks","job":"pytest","status":"success","errors":[],"warnings":[],"notices":[]}' > pytest-report.json
          mkdir -p summaries && mv pytest-report.json summaries/

      - name: Run Mypy
        if: ${{ matrix.task == 'mypy' }}
        run: |
          mypy . > mypy-output.txt 2>&1 || true
          python Scripts/convert_mypy.py mypy-output.txt mypy-report.json || echo '{"workflow":"backend-checks","job":"mypy","status":"success","errors":[],"warnings":[],"notices":[]}' > mypy-report.json
          mkdir -p summaries && mv mypy-report.json summaries/

      - name: Run Flake8
        if: ${{ matrix.task == 'flake8' }}
        run: |
          flake8 . > flake8-output.txt 2>&1 || true
          python Scripts/convert_flake8.py flake8-output.txt flake8-report.json || echo '{"workflow":"backend-checks","job":"flake8","status":"success","errors":[],"warnings":[],"notices":[]}' > flake8-report.json
          mkdir -p summaries && mv flake8-report.json summaries/

      - name: Run Black
        if: ${{ matrix.task == 'black' }}
        run: |
          black --check . > black-output.txt 2>&1 || true
          python Scripts/convert_black.py black-output.txt black-report.json || echo '{"workflow":"backend-checks","job":"black","status":"success","errors":[],"warnings":[],"notices":[]}' > black-report.json
          mkdir -p summaries && mv black-report.json summaries/

      - name: Upload partial backend summaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-partial-${{ matrix.task }}
          path: summaries/
          retention-days: 2

  backend-package:
    runs-on: ubuntu-latest
    needs: backend-checks
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./downloaded
      - run: |
          mkdir -p summaries
          find downloaded -name "*-report.json" -exec cp {} summaries/ \;
          echo "ðŸ“‚ Collected backend files:" && ls -R summaries
      - uses: actions/upload-artifact@v4
        with:
          name: backend-summaries
          path: summaries/
          retention-days: 2

  # ---------------------------
  # Coverage Jobs
  # ---------------------------
  coverage-checks:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        task: [frontend, backend, backend-node, e2e]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        if: ${{ matrix.task != 'backend' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - name: Setup pnpm
        if: ${{ matrix.task == 'frontend' || matrix.task == 'e2e' || matrix.task == 'backend-node' }}
        uses: pnpm/action-setup@v2
        with:
          version: 10
      - name: Setup Python
        if: ${{ matrix.task == 'backend' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run frontend coverage (Jest)
        if: ${{ matrix.task == 'frontend' }}
        run: |
          pnpm jest --config jest.config.cjs --coverage --all --coverageReporters=json-summary || true
          node Scripts/convert-jest-coverage.js coverage/frontend/coverage-summary.json frontend-coverage-report.json || echo '{"workflow":"coverage-checks","job":"frontend","status":"success","errors":[],"warnings":[],"notices":[]}' > frontend-coverage-report.json
          mkdir -p summaries && mv frontend-coverage-report.json summaries/

      - name: Run backend coverage (Pytest)
        if: ${{ matrix.task == 'backend' }}
        run: |
          pytest backend/tests --maxfail=1 --disable-warnings -q --cov=./backend --cov-branch --cov-report=xml:coverage/backend/coverage.xml --cov-report=json:coverage/backend/coverage-summary.json || true
          python Scripts/convert_cobertura.py coverage/backend/coverage.xml backend-cobertura-report.json || echo '{"workflow":"coverage-checks","job":"backend-cobertura","status":"success","errors":[],"warnings":[],"notices":[]}' > backend-cobertura-report.json
          python Scripts/convert_pytest_coverage.py coverage/backend/coverage-summary.json backend-coverage-report.json || echo '{"workflow":"coverage-checks","job":"backend-coverage","status":"success","errors":[],"warnings":[],"notices":[]}' > backend-coverage-report.json
          mkdir -p summaries && mv backend-cobertura-report.json backend-coverage-report.json summaries/

      - name: Run backend-node coverage (Jest)
        if: ${{ matrix.task == 'backend-node' }}
        run: |
          cd backend
          pnpm exec jest --config jest.config.cjs --coverage --coverageReporters=json-summary --coverageDirectory=coverage || true
          cd ..
          node Scripts/convert-jest-coverage.js backend/coverage/coverage-summary.json backend-node-coverage-report.json || echo '{"workflow":"coverage-checks","job":"backend-node","status":"success","errors":[],"warnings":[],"notices":[]}' > backend-node-coverage-report.json
          mkdir -p summaries && mv backend-node-coverage-report.json summaries/

      - name: Run e2e coverage (Playwright)
        if: ${{ matrix.task == 'e2e' }}
        run: |
          pnpm exec playwright install --with-deps || true
          pnpm exec playwright test || true
          npx nyc report --reporter=json-summary --report-dir=coverage/e2e || true
          node Scripts/convert-jest-coverage.js coverage/e2e/coverage-summary.json e2e-coverage-report.json || echo '{"workflow":"coverage-checks","job":"e2e","status":"success","errors":[],"warnings":[],"notices":[]}' > e2e-coverage-report.json
          mkdir -p summaries && mv e2e-coverage-report.json summaries/

      - name: Upload partial coverage summaries
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-partial-${{ matrix.task }}
          path: summaries/
          retention-days: 2

  coverage-package:
    runs-on: ubuntu-latest
    needs: coverage-checks
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ./downloaded
      - run: |
          mkdir -p summaries
          find downloaded -name "*-report.json" -exec cp {} summaries/ \;
          echo "ðŸ“‚ Collected coverage files:" && ls -R summaries
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-summaries
          path: summaries/
          retention-days: 2

  # ---------------------------
  # Central Diagnostics (Reusable Workflow)
  # ---------------------------
  diagnostics:
    needs: [frontend-package, backend-package, coverage-package]
    uses: ./.github/workflows/ci-diagnostics.yml
    secrets: inherit