name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  pull_request_target:
    types: [closed]
  schedule:
    - cron: "0 3 * * *" # daily cleanup at 3 AM UTC

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache node deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      - name: Build frontend
        run: |
          npm ci
          npm run build
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-
      - name: Install ODBC dev libs
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - name: Run backend smoke tests (Python)
        run: |
          pip install --prefer-binary -r requirements.txt
          pytest --maxfail=1 --disable-warnings -q --junitxml=test-results/python-smoke.xml
      - name: Run frontend smoke tests (Node)
        run: |
          npm test -- --watchAll=false --ci --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT: test-results/jest-smoke.xml
      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-results
          path: test-results/
      - name: Publish smoke test results to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Smoke Tests
          path: test-results/*.xml
          reporter: java-junit
          fail-on-error: true

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Cache node deps
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-${{ matrix.node-version }}-
      - name: Install frontend dependencies
        run: npm ci
      - name: Run frontend tests with coverage
        run: npm test -- --coverage --coverageReporters=lcov --ci --reporters=default --reporters=jest-junit
        env:
          JEST_JUNIT_OUTPUT: test-results/jest-results.xml
      - name: Ensure coverage file exists
        run: |
          if [ ! -f coverage/lcov.info ]; then
            echo "❌ Frontend coverage file not found"
            exit 1
          fi
      - name: Upload frontend coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-frontend
          path: coverage/lcov.info
      - name: Upload frontend test results
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results-${{ matrix.node-version }}
          path: test-results/
      - name: Publish frontend test results to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Frontend Tests (Node ${{ matrix.node-version }})
          path: test-results/*.xml
          reporter: java-junit
          fail-on-error: true

  backend-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10.15", "3.11.9", "3.12.3"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-${{ matrix.python-version }}-
      - name: Install ODBC dev libs
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev
      - run: |
          pip install --prefer-binary -r requirements.txt
          pytest --cov=. --cov-report=xml:coverage.xml --junitxml=test-results/python-${{ matrix.python-version }}.xml
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-backend-${{ matrix.python-version }}
          path: coverage.xml
      - name: Upload backend test results
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results-${{ matrix.python-version }}
          path: test-results/
      - name: Publish backend test results to GitHub
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Backend Tests (Python ${{ matrix.python-version }})
          path: test-results/*.xml
          reporter: java-junit
          fail-on-error: true

  build-check:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Download frontend coverage
        uses: actions/download-artifact@v4
        with:
          name: coverage-frontend
          path: coverage-frontend
      - name: Verify frontend coverage artifact
        run: |
          if [ ! -f coverage-frontend/lcov.info ] && [ ! -f coverage/lcov.info ]; then
            echo "❌ Missing frontend coverage artifact"
            exit 1
          fi
      - name: Download backend coverage (3.10)
        uses: actions/download-artifact@v4
        with:
          name: coverage-backend-3.10.15
          path: coverage-backend-3_10
      - name: Download backend coverage (3.11)
        uses: actions/download-artifact@v4
        with:
          name: coverage-backend
          path: coverage-backend-3_11
      - name: Download backend coverage (3.12)
        uses: actions/download-artifact@v4
        with:
          name: coverage-backend-3.12.3
          path: coverage-backend-3_12
      - name: Merge coverage reports
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator \
            -reports:"coverage/lcov.info;coverage-backend-3_10/coverage.xml;coverage-backend-3_11/coverage.xml;coverage-backend-3_12/coverage.xml" \
            -targetdir:"merged-coverage" \
            -reporttypes:Html;Cobertura
      - uses: actions/upload-artifact@v4
        with:
          name: merged-coverage
          path: merged-coverage
      - name: Extract coverage summary
        id: coverage
        run: |
          LINE_RATE=$(xmllint --xpath 'string(/coverage/@line-rate)' merged-coverage/Cobertura.xml)
          BRANCH_RATE=$(xmllint --xpath 'string(/coverage/@branch-rate)' merged-coverage/Cobertura.xml)
          PERCENT_LINE=$(awk -v rate=$LINE_RATE 'BEGIN { printf("%d%%", rate*100) }')
          PERCENT_BRANCH=$(awk -v rate=$BRANCH_RATE 'BEGIN { printf("%d%%", rate*100) }')
          echo "line_rate=$PERCENT_LINE" >> $GITHUB_OUTPUT
          echo "branch_rate=$PERCENT_BRANCH" >> $GITHUB_OUTPUT
      - name: Add coverage + test summary to GitHub Actions Summary
        run: |
          echo "### ✅ Test & Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Line Coverage | ${{ steps.coverage.outputs.line_rate }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Branch Coverage | ${{ steps.coverage.outputs.branch_rate }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 Detailed results are available in the PR Checks tab and artifacts." >> $GITHUB_STEP_SUMMARY

  preview-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build-and-test, frontend-tests, backend-tests]
    steps:
      - uses: actions/checkout@v4
      - name: Set Preview Name
        run: echo "PREVIEW_NAME=myapp-pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      - name: Deploy Preview to Render
        run: |
          curl -X POST "https://api.render.com/v1/services" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "name": "'"$PREVIEW_NAME"'",
              "type": "web_service",
              "repo": "'"${{ github.repository }}"'",
              "branch": "'"${{ github.head_ref }}"'",
              "env": "node",
              "buildCommand": "npm install && npm run build",
              "startCommand": "cd backend && node server.js",
              "plan": "free"
            }'
      - name: Comment Preview URL on PR
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            🚀 Preview deployed: https://${{ env.PREVIEW_NAME }}.onrender.com

  cleanup-preview:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request_target' && github.event.action == 'closed'
    steps:
      - name: Set Preview Name
        run: echo "PREVIEW_NAME=myapp-pr-${{ github.event.pull_request.number }}" >> $GITHUB_ENV
      - name: Delete Preview Service from Render
        run: |
          curl -X DELETE "https://api.render.com/v1/services/${{ env.PREVIEW_NAME }}" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"

  cleanup-expired:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Fetch All Render Services
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            https://api.render.com/v1/services | jq -r '.[] | select(.name | startswith("myapp-pr-")) | "\(.id) \(.name) \(.createdAt)"' > services.txt
      - name: Delete Old Services (>3 days)
        run: |
          cutoff=$(date -d "3 days ago" +%s)
          while read -r id name created; do
            created_epoch=$(date -d "$created" +%s)
            if [ "$created_epoch" -lt "$cutoff" ]; then
              echo "Deleting expired preview: $name ($id)"
              curl -X DELETE "https://api.render.com/v1/services/$id" \
                -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"
            fi
          done < services.txt