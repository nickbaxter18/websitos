name: CI Diagnostics

on:
  workflow_run:
    workflows: ["Coverage Checks", "Frontend Checks", "Backend Checks", "Render Deploy with Smoke Test", "Post-Deploy Smoke Tests", "Lint", "Prettier", "Type Check", "Sync", "Test:Unit", "Test:E2E", "Analyze (javascript)", "Analyze (python)", "Checks (flake8)", "Checks (black)", "Checks (mypy)", "Checks (pytest)", "Upload Codecov", "PR Summary"]
    types:
      - completed

jobs:
  analyze-diagnostics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download logs from completed workflow
        uses: actions/download-artifact@v4
        with:
          path: diagnostics-logs

      - name: Gather failure and warning summary with classification
        id: classify
        run: |
          echo "## ⚠️ CI Diagnostics Report" > report.md
          echo "Workflow: ${{ github.event.workflow_run.name }}" >> report.md
          echo "Commit: ${{ github.event.workflow_run.head_sha }}" >> report.md
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}" >> report.md
          echo "---" >> report.md

          ERRORS=$(grep -iE "(error|fail|exception|missing|denied)" -R diagnostics-logs || true)
          WARNINGS=$(grep -iE "(warn|warning|deprecated)" -R diagnostics-logs || true)
          STACK=$(grep -iE "(Traceback|Error:|Exception:)" -R diagnostics-logs | head -n 20 || true)

          if [ -z "$ERRORS" ] && [ -z "$WARNINGS" ]; then
            echo "### 🔎 Log Highlights" >> report.md
            echo "No obvious errors or warnings found in logs." >> report.md
          else
            echo "### 🔎 Log Highlights" >> report.md
            if [ -n "$ERRORS" ]; then
              echo "#### ❌ Errors" >> report.md
              echo "$ERRORS" | head -n 50 >> report.md
            fi
            if [ -n "$WARNINGS" ]; then
              echo "#### ⚠️ Warnings" >> report.md
              echo "$WARNINGS" | head -n 50 >> report.md
            fi
            if [ -n "$STACK" ]; then
              echo "#### 🔍 Extracted Stack Trace" >> report.md
              echo "$STACK" >> report.md
            fi
          fi

          echo "---" >> report.md
          echo "### 🧭 Classification" >> report.md

          CLASS="advisory"
          if [ -n "$ERRORS" ]; then
            CLASS="failure"
          elif [ -n "$WARNINGS" ]; then
            CLASS="warning"
          fi

          echo "class=$CLASS" >> $GITHUB_OUTPUT

          # Detect component from stack or logs
          COMPONENT="general"
          if echo "$STACK" | grep -qi "frontend"; then COMPONENT="frontend"; fi
          if echo "$STACK" | grep -qi "backend"; then COMPONENT="backend"; fi
          if echo "$STACK" | grep -qi "test"; then COMPONENT="tests"; fi
          if echo "$STACK" | grep -qi "network\|timeout"; then COMPONENT="infra"; fi
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT

          # Try to extract coverage delta if summary exists
          if [ -f diagnostics-logs/coverage-frontend/coverage-summary.json ]; then
            FRONTEND_COV=$(jq '.total.lines.pct' diagnostics-logs/coverage-frontend/coverage-summary.json)
            echo "Frontend coverage: $FRONTEND_COV%" >> report.md
          fi
          if [ -f diagnostics-logs/coverage-backend/coverage-summary.json ]; then
            BACKEND_COV=$(jq '.total.lines.pct' diagnostics-logs/coverage-backend/coverage-summary.json)
            echo "Backend coverage: $BACKEND_COV%" >> report.md
          fi

      - name: Post diagnostics as PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: ci-diagnostics
          path: report.md

      - name: Create or update Linear issue
        if: steps.classify.outputs.class != 'advisory'
        uses: actions/github-script@v7
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
        with:
          script: |
            const fetch = require('node-fetch');
            const fs = require('fs');

            const classification = '${{ steps.classify.outputs.class }}';
            const component = '${{ steps.classify.outputs.component }}';
            const workflow = '${{ github.event.workflow_run.name }}';
            const commit = '${{ github.event.workflow_run.head_sha }}';

            // Read diagnostics
            const description = fs.readFileSync('report.md', 'utf8');

            // Get commit author for assignment
            const { data: commitData } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: commit,
            });
            const author = commitData.commit.author.name;
            const authorEmail = commitData.commit.author.email;

            const title = `CI ${classification.toUpperCase()} in ${workflow}`;

            const query = `mutation IssueCreate($input: IssueCreateInput!) {
              issueCreate(input: $input) {
                success
                issue { id url }
              }
            }`;

            const variables = {
              input: {
                teamId: process.env.LINEAR_TEAM_ID,
                title: title,
                description: `${description}\n---\n👤 Commit Author: ${author} <${authorEmail}>\n🔗 Commit: https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commit}\n🔗 Workflow Run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.event.workflow_run.id }}`,
                labelIds: [],
              }
            };

            const res = await fetch("https://api.linear.app/graphql", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                "Authorization": process.env.LINEAR_API_KEY
              },
              body: JSON.stringify({ query, variables })
            });

            const data = await res.json();
            if (data.errors) {
              core.setFailed(JSON.stringify(data.errors));
            } else {
              console.log(`Created/linked Linear issue: ${data.data.issueCreate.issue.url}`);
            }

      - name: Upload raw logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-diagnostics-logs
          path: diagnostics-logs