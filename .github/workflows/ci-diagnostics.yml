name: CI Diagnostics

on:
  workflow_call:
    secrets:
      LINEAR_API_KEY:
        required: true
      LINEAR_TEAM_ID:
        required: true
  workflow_dispatch:

permissions:
  checks: write
  contents: read
  actions: read

jobs:
  diagnostics:
    name: Run CI Diagnostics
    runs-on: ubuntu-latest
    if: always()
    env:
      LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
      LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create pending CI Diagnostics check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "CI Diagnostics",
              head_sha: process.env.GITHUB_SHA,
              status: "in_progress",
              output: {
                title: "CI Diagnostics Running",
                summary: "Diagnostics workflow has started."
              }
            });
            core.setOutput("check_id", check.id);

      - name: Debug secrets
        run: |
          if [ -z "$LINEAR_API_KEY" ]; then
            echo "‚ùå LINEAR_API_KEY is empty"
          else
            echo "üîë LINEAR_API_KEY length: ${#LINEAR_API_KEY}"
            echo "üîë LINEAR_API_KEY starts with: ${LINEAR_API_KEY:0:6}***"
          fi

          if [ -z "$LINEAR_TEAM_ID" ]; then
            echo "‚ùå LINEAR_TEAM_ID is empty"
          else
            echo "üìå LINEAR_TEAM_ID: $LINEAR_TEAM_ID"
          fi

      - name: Linear connectivity and team validation
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            if (!process.env.LINEAR_API_KEY || !process.env.LINEAR_TEAM_ID) {
              console.log("‚ùå Missing Linear secrets");
              fs.appendFileSync('report.md', `\n\n‚ùå Linear API key or team ID not configured.`);
              return;
            }

            const token = process.env.LINEAR_API_KEY.trim();

            async function runQuery(query) {
              const res = await fetch("https://api.linear.app/graphql", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify({ query })
              });
              return res.json();
            }

            // Viewer check
            const viewer = await runQuery("query { viewer { id name email organization { id name } } }");
            if (viewer.errors) {
              console.log("‚ùå Viewer query error", viewer.errors);
              fs.appendFileSync('report.md', `\n\n‚ùå Viewer query error: ${JSON.stringify(viewer.errors)}`);
            } else {
              console.log("‚úÖ Viewer query success", viewer.data);
              fs.appendFileSync('report.md', `\n\n‚úÖ Viewer: ${JSON.stringify(viewer.data)}`);
            }

            // Teams check (fix: use nodes)
            const teams = await runQuery("query { teams { nodes { id name } } }");
            if (teams.errors) {
              console.log("‚ùå Teams query error", teams.errors);
              fs.appendFileSync('report.md', `\n\n‚ùå Teams query error: ${JSON.stringify(teams.errors)}`);
            } else {
              const team = teams.data.teams.nodes.find(t => t.id === process.env.LINEAR_TEAM_ID.trim());
              if (team) {
                console.log("‚úÖ Team ID valid", team);
                fs.appendFileSync('report.md', `\n\n‚úÖ Team ID valid: ${team.id} (${team.name})`);
              } else {
                console.log("‚ùå LINEAR_TEAM_ID mismatch", teams.data.teams.nodes);
                fs.appendFileSync('report.md', `\n\n‚ùå LINEAR_TEAM_ID does not match any team. Found: ${JSON.stringify(teams.data.teams.nodes)}`);
              }
            }

      - name: Complete CI Diagnostics check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('report.md', 'utf8').slice(0, 60000);
            let conclusion = "success";

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "CI Diagnostics",
              head_sha: process.env.GITHUB_SHA,
              status: "completed",
              conclusion,
              output: {
                title: "CI Diagnostics Report",
                summary
              }
            });