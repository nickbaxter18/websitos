name: CI Diagnostics

on:
  workflow_run:
    workflows: ["Coverage Checks", "Frontend Checks", "Backend Checks", "Render Deploy with Smoke Test", "Post-Deploy Smoke Tests", "Lint", "Prettier", "Type Check", "Sync", "Test:Unit", "Test:E2E", "Analyze (javascript)", "Analyze (python)", "Checks (flake8)", "Checks (black)", "Checks (mypy)", "Checks (pytest)", "Upload Codecov", "PR Summary"]
    types:
      - completed

jobs:
  analyze-diagnostics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download logs from completed workflow
        uses: actions/download-artifact@v4
        with:
          path: diagnostics-logs

      - name: Validate artifact presence
        run: |
          if [ ! -d "diagnostics-logs" ] || [ -z "$(ls -A diagnostics-logs)" ]; then
            echo "⚠️ Warning: No diagnostics logs were uploaded by the triggering workflow. Skipping log analysis but continuing workflow." >&2
            echo "class=clean" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Gather failure and warning summary with classification
        id: classify
        run: |
          echo "## ⚠️ CI Diagnostics Report" > report.md
          echo "Workflow: ${{ github.event.workflow_run.name }}" >> report.md
          echo "Commit: ${{ github.event.workflow_run.head_sha }}" >> report.md
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}" >> report.md
          echo "---" >> report.md

          # Limit to 500 lines max per category to avoid flooding
          ERRORS=$(grep -iE "(error|fail|exception|missing|denied)" -R diagnostics-logs | head -n 500 || true)
          WARNINGS=$(grep -iE "(warn|warning|deprecated)" -R diagnostics-logs | head -n 500 || true)
          STACK=$(grep -iE "(Traceback|Error:|Exception:)" -R diagnostics-logs | head -n 20 || true)

          ERROR_COUNT=$(echo "$ERRORS" | grep -c . || true)
          WARNING_COUNT=$(echo "$WARNINGS" | grep -c . || true)

          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT

          if [ -z "$ERRORS" ] && [ -z "$WARNINGS" ]; then
            echo "### 🔎 Log Highlights" >> report.md
            echo "No obvious errors or warnings found in logs." >> report.md
            echo "class=clean" >> $GITHUB_OUTPUT
          else
            echo "### 🔎 Log Highlights" >> report.md
            if [ -n "$ERRORS" ]; then
              echo "#### ❌ Errors (showing first 500 lines)" >> report.md
              echo "$ERRORS" >> report.md
              while IFS= read -r line; do
                echo "::error::$line"
              done <<< "$ERRORS"
            fi
            if [ -n "$WARNINGS" ]; then
              echo "#### ⚠️ Warnings (showing first 500 lines)" >> report.md
              echo "$WARNINGS" >> report.md
              while IFS= read -r line; do
                echo "::warning::$line"
              done <<< "$WARNINGS"
            fi
            if [ -n "$STACK" ]; then
              echo "#### 🔍 Extracted Stack Trace" >> report.md
              echo "$STACK" >> report.md
            fi

            if [ -n "$ERRORS" ]; then
              echo "class=failure" >> $GITHUB_OUTPUT
            elif [ -n "$WARNINGS" ]; then
              echo "class=warning" >> $GITHUB_OUTPUT
            fi
          fi

          echo "---" >> report.md
          echo "### 🧭 Classification" >> report.md

          COMPONENT="general"
          if echo "$STACK" | grep -qi "frontend"; then COMPONENT="frontend"; fi
          if echo "$STACK" | grep -qi "backend"; then COMPONENT="backend"; fi
          if echo "$STACK" | grep -qi "test"; then COMPONENT="tests"; fi
          if echo "$STACK" | grep -qi "network\|timeout"; then COMPONENT="infra"; fi
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT

          if [ -f diagnostics-logs/coverage-frontend/coverage-summary.json ]; then
            FRONTEND_COV=$(jq -r '.total.lines.pct // 0' diagnostics-logs/coverage-frontend/coverage-summary.json || echo 0)
            echo "frontend_cov=$FRONTEND_COV" >> $GITHUB_OUTPUT
          fi
          if [ -f diagnostics-logs/coverage-backend/coverage-summary.json ]; then
            BACKEND_COV=$(jq -r '.total.lines.pct // 0' diagnostics-logs/coverage-backend/coverage-summary.json || echo 0)
            echo "backend_cov=$BACKEND_COV" >> $GITHUB_OUTPUT
          fi
          echo "timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Upload CI Diagnostics Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-diagnostics-report
          path: |
            report.md
            diagnostics-logs
          retention-days: 14

      - name: Append CI Diagnostics to GitHub Summary
        if: always()
        run: |
          echo "# ⚠️ CI Diagnostics Report" >> $GITHUB_STEP_SUMMARY
          echo "Workflow: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "Commit: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          cat report.md >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Coverage Overview" >> $GITHUB_STEP_SUMMARY
          echo "| Area | Coverage |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|" >> $GITHUB_STEP_SUMMARY
          FRONTEND_COV=${{ steps.classify.outputs.frontend_cov || 0 }}
          BACKEND_COV=${{ steps.classify.outputs.backend_cov || 0 }}
          echo "| Frontend | ${FRONTEND_COV}% |" >> $GITHUB_STEP_SUMMARY
          echo "| Backend | ${BACKEND_COV}% |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ⚠️ Issue Counts" >> $GITHUB_STEP_SUMMARY
          echo "| Type | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|------|-------|" >> $GITHUB_STEP_SUMMARY
          ERROR_COUNT=${{ steps.classify.outputs.error_count || 0 }}
          WARNING_COUNT=${{ steps.classify.outputs.warning_count || 0 }}
          echo "| Errors | ${ERROR_COUNT} |" >> $GITHUB_STEP_SUMMARY
          echo "| Warnings | ${WARNING_COUNT} |" >> $GITHUB_STEP_SUMMARY