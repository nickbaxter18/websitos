name: CI Diagnostics

on:
  workflow_run:
    workflows: ["Coverage Checks", "Frontend Checks", "Backend Checks", "Render Deploy with Smoke Test", "Post-Deploy Smoke Tests", "Lint", "Prettier", "Type Check", "Sync", "Test:Unit", "Test:E2E", "Analyze (javascript)", "Analyze (python)", "Checks (flake8)", "Checks (black)", "Checks (mypy)", "Checks (pytest)", "Upload Codecov", "PR Summary"]
    types:
      - completed

jobs:
  analyze-diagnostics:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download logs from completed workflow
        uses: actions/download-artifact@v4
        with:
          path: diagnostics-logs

      - name: Validate artifact presence
        run: |
          if [ ! -d "diagnostics-logs" ] || [ -z "$(ls -A diagnostics-logs)" ]; then
            echo "‚ö†Ô∏è Warning: No diagnostics logs were uploaded by the triggering workflow. Skipping artifact log analysis but continuing." >&2
            echo "class=clean" >> $GITHUB_OUTPUT
          fi

      - name: Gather failure and warning summary with classification
        id: classify
        run: |
          echo "## ‚ö†Ô∏è CI Diagnostics Report" > report.md
          echo "Workflow: ${{ github.event.workflow_run.name }}" >> report.md
          echo "Commit: ${{ github.event.workflow_run.head_sha }}" >> report.md
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}" >> report.md
          echo "---" >> report.md

          ERRORS=$(grep -iE "(error|fail|exception|missing|denied)" -R diagnostics-logs | head -n 500 || true)
          WARNINGS=$(grep -iE "(warn|warning|deprecated)" -R diagnostics-logs | head -n 500 || true)
          STACK=$(grep -iE "(Traceback|Error:|Exception:)" -R diagnostics-logs | head -n 20 || true)

          ERROR_COUNT=$(echo "$ERRORS" | grep -c . || true)
          WARNING_COUNT=$(echo "$WARNINGS" | grep -c . || true)

          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT

          if [ -z "$ERRORS" ] && [ -z "$WARNINGS" ]; then
            echo "### üîé Log Highlights" >> report.md
            echo "No obvious errors or warnings found in logs." >> report.md
            echo "class=clean" >> $GITHUB_OUTPUT
          else
            echo "### üîé Log Highlights" >> report.md
            if [ -n "$ERRORS" ]; then
              echo "#### ‚ùå Errors (showing first 500 lines)" >> report.md
              echo "$ERRORS" >> report.md
              while IFS= read -r line; do
                echo "::error::$line"
              done <<< "$ERRORS"
            fi
            if [ -n "$WARNINGS" ]; then
              echo "#### ‚ö†Ô∏è Warnings (showing first 500 lines)" >> report.md
              echo "$WARNINGS" >> report.md
              while IFS= read -r line; do
                echo "::warning::$line"
              done <<< "$WARNINGS"
            fi
            if [ -n "$STACK" ]; then
              echo "#### üîç Extracted Stack Trace" >> report.md
              echo "$STACK" >> report.md
            fi

            if [ -n "$ERRORS" ]; then
              echo "class=failure" >> $GITHUB_OUTPUT
            elif [ -n "$WARNINGS" ]; then
              echo "class=warning" >> $GITHUB_OUTPUT
            fi
          fi

          echo "---" >> report.md
          echo "### üß≠ Classification" >> report.md

          COMPONENT="general"
          if echo "$STACK" | grep -qi "frontend"; then COMPONENT="frontend"; fi
          if echo "$STACK" | grep -qi "backend"; then COMPONENT="backend"; fi
          if echo "$STACK" | grep -qi "test"; then COMPONENT="tests"; fi
          if echo "$STACK" | grep -qi "network\|timeout"; then COMPONENT="infra"; fi
          echo "component=$COMPONENT" >> $GITHUB_OUTPUT

          if [ -f diagnostics-logs/coverage-frontend/coverage-summary.json ]; then
            FRONTEND_COV=$(jq -r '.total.lines.pct // 0' diagnostics-logs/coverage-frontend/coverage-summary.json || echo 0)
            echo "frontend_cov=$FRONTEND_COV" >> $GITHUB_OUTPUT
          fi
          if [ -f diagnostics-logs/coverage-backend/coverage-summary.json ]; then
            BACKEND_COV=$(jq -r '.total.lines.pct // 0' diagnostics-logs/coverage-backend/coverage-summary.json || echo 0)
            echo "backend_cov=$BACKEND_COV" >> $GITHUB_OUTPUT
          fi
          echo "timestamp=$(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT

      - name: Gather GitHub Check Annotations
        id: annotations
        uses: actions/github-script@v7
        with:
          script: |
            const runId = ${{ github.event.workflow_run.id }};
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            let warnings = [];
            let errors = [];

            for (const job of jobs.jobs) {
              const { data: annots } = await github.rest.checks.listAnnotations({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: job.id
              });
              for (const a of annots) {
                if (a.annotation_level === 'failure') errors.push(a.message);
                if (a.annotation_level === 'warning') warnings.push(a.message);
              }
            }

            core.setOutput("errors", errors.join("\n"));
            core.setOutput("warnings", warnings.join("\n"));

            console.log("Pulled annotations:", { errors, warnings });

      - name: Merge Annotations into Report
        if: always()
        run: |
          echo "" >> report.md
          echo "---" >> report.md
          echo "### üìã GitHub Annotations" >> report.md

          if [ -n "${{ steps.annotations.outputs.errors }}" ]; then
            echo "#### ‚ùå Errors from GitHub Checks" >> report.md
            echo "${{ steps.annotations.outputs.errors }}" >> report.md
          fi

          if [ -n "${{ steps.annotations.outputs.warnings }}" ]; then
            echo "#### ‚ö†Ô∏è Warnings from GitHub Checks" >> report.md
            echo "${{ steps.annotations.outputs.warnings }}" >> report.md
          fi

      - name: Sync Linear issue (failure/warning)
        if: steps.classify.outputs.class == 'failure' || steps.classify.outputs.class == 'warning' || steps.annotations.outputs.errors != '' || steps.annotations.outputs.warnings != ''
        uses: actions/github-script@v7
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
        with:
          script: |
            const fetch = require('node-fetch');
            const fs = require('fs');

            async function callLinear(query, variables, retries = 3) {
              for (let i = 0; i < retries; i++) {
                const res = await fetch("https://api.linear.app/graphql", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${process.env.LINEAR_API_KEY}`
                  },
                  body: JSON.stringify({ query, variables })
                });
                if (res.ok) return await res.json();
                if (i < retries - 1) {
                  console.log(`Retrying Linear API call... attempt ${i+2}`);
                  await new Promise(r => setTimeout(r, 1000 * (i+1)));
                }
              }
              throw new Error("Linear API request failed after retries");
            }

            const classification = '${{ steps.classify.outputs.class }}';
            const workflow = '${{ github.event.workflow_run.name }}';
            const commit = '${{ github.event.workflow_run.head_sha }}';

            const logErrors = `${{ steps.classify.outputs.error_count }}`;
            const logWarnings = `${{ steps.classify.outputs.warning_count }}`;
            const checkErrors = `${{ steps.annotations.outputs.errors }}`;
            const checkWarnings = `${{ steps.annotations.outputs.warnings }}`;

            const description = fs.readFileSync('report.md', 'utf8')
              .replace(/(password|secret|token|apikey|jwt|bearer|auth|key|cred)\s*[:=]\s*\S+/gi, "[REDACTED]");

            const title = `CI ${classification.toUpperCase()} in ${workflow}`;

            const query = `mutation IssueCreate($input: IssueCreateInput!) {
              issueCreate(input: $input) {
                success
                issue { id url }
              }
            }`;

            const variables = {
              input: {
                teamId: process.env.LINEAR_TEAM_ID,
                title,
                description: `${description}\n---\nüîç GitHub Annotations Errors: ${checkErrors}\nüîç GitHub Annotations Warnings: ${checkWarnings}\n---\nüìä Log Errors: ${logErrors}\nüìä Log Warnings: ${logWarnings}\nüîó Commit: https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commit}\nüîó Workflow Run: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${{ github.event.workflow_run.id }}`,
                labelIds: []
              }
            };

            const result = await callLinear(query, variables);
            console.log("Linear response:", JSON.stringify(result, null, 2));