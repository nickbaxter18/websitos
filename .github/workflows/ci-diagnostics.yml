name: CI Diagnostics

on:
  workflow_call:
    secrets:
      LINEAR_API_KEY:
        required: true
      LINEAR_TEAM_ID:
        required: true
  workflow_dispatch:

permissions:
  checks: write
  contents: read
  actions: read

jobs:
  diagnostics:
    name: Run CI Diagnostics
    runs-on: ubuntu-latest
    if: always()
    env:
      LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
      LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create pending CI Diagnostics check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: check } = await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "CI Diagnostics",
              head_sha: process.env.GITHUB_SHA,
              status: "in_progress",
              output: {
                title: "CI Diagnostics Running",
                summary: "Diagnostics workflow has started."
              }
            });
            core.setOutput("check_id", check.id);

      - name: Aggregate annotations from all checks
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: process.env.GITHUB_SHA,
            });

            let allAnnotations = [];

            for (const check of checks.check_runs) {
              const annotations = await github.paginate(github.rest.checks.listAnnotationsForCheckRun, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: check.id,
              });

              if (annotations.length) {
                allAnnotations.push({ check: check.name, annotations });
              }
            }

            let report = "## ‚ö†Ô∏è CI Diagnostics Report\n";

            if (!allAnnotations.length) {
              report += "\n‚úÖ No errors or warnings detected across checks.";
            } else {
              report += "\n### üîé Aggregated Annotations\n";
              for (const block of allAnnotations) {
                report += `\n**${block.check}**\n`;
                for (const a of block.annotations) {
                  report += `- ${a.annotation_level.toUpperCase()}: ${a.message} (${a.path}:${a.start_line})\n`;
                }
              }
            }

            fs.writeFileSync('report.md', report);

      - name: Sync diagnostics to Linear
        continue-on-error: true
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const token = process.env.LINEAR_API_KEY.trim();
            const teamId = process.env.LINEAR_TEAM_ID.trim();
            const commit = process.env.GITHUB_SHA;
            const branch = process.env.GITHUB_REF_NAME;

            const description = fs.readFileSync('report.md', 'utf8');
            const title = `CI Diagnostics (${branch}, ${commit.substring(0,7)})`;

            async function runQuery(query, variables = {}) {
              const res = await fetch("https://api.linear.app/graphql", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify({ query, variables })
              });
              return res.json();
            }

            // Check if issue exists
            const searchQuery = `query Issues($filter: IssueFilter) { issues(filter: $filter, first: 1) { nodes { id url title } } }`;
            const searchVars = { filter: { title: { eq: title } } };
            const existing = await runQuery(searchQuery, searchVars);

            if (existing.data?.issues?.nodes?.length) {
              const issueId = existing.data.issues.nodes[0].id;
              const updateMutation = `mutation IssueUpdate($id: String!, $input: IssueUpdateInput!) { issueUpdate(id: $id, input: $input) { success issue { id url } } }`;
              const updateVars = { id: issueId, input: { description, teamId } };
              const updated = await runQuery(updateMutation, updateVars);
              fs.appendFileSync('report.md', `\n\nüîÑ Updated Linear issue: ${updated?.data?.issueUpdate?.issue?.url || 'n/a'}`);
            } else {
              const createMutation = `mutation IssueCreate($input: IssueCreateInput!) { issueCreate(input: $input) { success issue { id url } } }`;
              const createVars = { input: { title, description, teamId } };
              const created = await runQuery(createMutation, createVars);
              fs.appendFileSync('report.md', `\n\nüÜï Created Linear issue: ${created?.data?.issueCreate?.issue?.url || 'n/a'}`);
            }

      - name: Complete CI Diagnostics check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('report.md', 'utf8').slice(0, 60000);

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "CI Diagnostics",
              head_sha: process.env.GITHUB_SHA,
              status: "completed",
              conclusion: "success",
              output: {
                title: "CI Diagnostics Report",
                summary
              }
            });