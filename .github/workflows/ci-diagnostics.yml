name: CI Diagnostics

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  analyze-diagnostics:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: diagnostics-logs

      - name: Debug info
        run: |
          echo "CI Diagnostics triggered on push/pr"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Listing downloaded artifacts:"
          ls -R diagnostics-logs || echo "No artifacts found"

      - name: Validate artifact presence
        id: validate
        run: |
          if [ ! -d "diagnostics-logs" ] || [ -z "$(ls -A diagnostics-logs)" ]; then
            echo "❌ No diagnostics logs were uploaded by workflows." >&2
            echo "logs_present=false" >> $GITHUB_OUTPUT
          else
            echo "logs_present=true" >> $GITHUB_OUTPUT
          fi

      - name: Guard against empty run
        if: steps.validate.outputs.logs_present == 'false'
        run: |
          echo "No logs or annotations found. Marking as clean."
          exit 0

      - name: Gather failure and warning summary with classification
        id: classify
        run: |
          echo "## ⚠️ CI Diagnostics Report" > report.md
          echo "Triggered by: push/pr" >> report.md
          echo "Commit: ${{ github.sha }}" >> report.md
          echo "Branch: ${{ github.ref_name }}" >> report.md
          echo "---" >> report.md

          if [ "${{ steps.validate.outputs.logs_present }}" == "true" ]; then
            ERRORS=$(grep -iE "(error|fail|exception|missing|denied)" -R diagnostics-logs | sort | uniq | head -n 500 || true)
            WARNINGS=$(grep -iE "(warn|warning|deprecated)" -R diagnostics-logs | sort | uniq | head -n 500 || true)
            STACK=$(grep -iE "(Traceback|Error:|Exception:)" -R diagnostics-logs | head -n 20 || true)
          else
            ERRORS=""
            WARNINGS=""
            STACK=""
          fi

          ERROR_COUNT=$(echo "$ERRORS" | grep -c . || true)
          WARNING_COUNT=$(echo "$WARNINGS" | grep -c . || true)

          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT

          if [ "${{ steps.validate.outputs.logs_present }}" != "true" ]; then
            echo "⚠️ No logs were available for analysis." >> report.md
            echo "class=missing_logs" >> $GITHUB_OUTPUT
          fi

      - name: Sync Linear issue (logs or annotations)
        if: steps.classify.outputs.class == 'missing_logs' || steps.classify.outputs.error_count != '0' || steps.classify.outputs.warning_count != '0'
        uses: actions/github-script@v7
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
        with:
          script: |
            const fetch = require('node-fetch');
            const fs = require('fs');

            async function callLinear(query, variables, retries = 3) {
              for (let i = 0; i < retries; i++) {
                const res = await fetch("https://api.linear.app/graphql", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${process.env.LINEAR_API_KEY}`
                  },
                  body: JSON.stringify({ query, variables })
                });
                const json = await res.json();
                console.log("Linear API response attempt", i + 1, JSON.stringify(json, null, 2));
                if (res.ok && !json.errors) return json;
                if (i < retries - 1) {
                  console.log("Retrying Linear API call...");
                  await new Promise(r => setTimeout(r, 1000 * (i+1)));
                }
              }
              throw new Error("Linear API request failed after retries");
            }

            const classification = '${{ steps.classify.outputs.class || "unknown" }}';
            const commit = '${{ github.sha }}';
            const branch = process.env.GITHUB_REF_NAME || "unknown";

            const logErrors = '${{ steps.classify.outputs.error_count }}';
            const logWarnings = '${{ steps.classify.outputs.warning_count }}';

            let description = fs.readFileSync('report.md', 'utf8')
              .replace(/(password|secret|token|apikey|jwt|bearer|auth|key|cred)\s*[:=]\s*\S+/gi, "[REDACTED]");

            if (classification === 'missing_logs') {
              description += "\n❌ Logs were missing from this run.";
            }

            const title = `CI Diagnostics (${branch}, ${commit.substring(0,7)})`;

            const query = `mutation IssueCreate($input: IssueCreateInput!) { issueCreate(input: $input) { success issue { id url } } }`;
            const variables = { input: { teamId: process.env.LINEAR_TEAM_ID, title, description, labelIds: [] } };

            try {
              const result = await callLinear(query, variables);
              console.log("Final Linear API result:", JSON.stringify(result, null, 2));
            } catch (err) {
              core.setFailed("Linear API sync failed: " + err.message);
            }

      - name: Upload CI Diagnostics summary as check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('report.md', 'utf8').slice(0, 60000);
            const conclusion = "${{ job.status }}" === "success" ? "success" : "failure";

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "CI Diagnostics",
              head_sha: "${{ github.sha }}",
              status: "completed",
              conclusion,
              output: {
                title: "CI Diagnostics Report",
                summary
              }
            });