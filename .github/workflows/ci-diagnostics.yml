name: CI Diagnostics

on:
  workflow_call:
    secrets:
      LINEAR_API_KEY:
        required: true
      LINEAR_TEAM_ID:
        required: true
  workflow_dispatch:

permissions:
  checks: write
  contents: read
  actions: read

jobs:
  diagnostics:
    name: Run CI Diagnostics (Central)
    runs-on: ubuntu-latest
    if: always()
    env:
      LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
      LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download frontend summaries
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: frontend-summaries
          path: ./summaries/frontend

      - name: Download backend summaries
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: backend-summaries
          path: ./summaries/backend

      - name: Download coverage summaries
        continue-on-error: true
        uses: actions/download-artifact@v4
        with:
          name: coverage-summaries
          path: ./summaries/coverage

      - name: Debug list summaries
        run: |
          echo "📂 Listing summaries directory contents"
          ls -R ./summaries || true

      - name: Aggregate summaries into report
        run: |
          node -e '
          const fs = require("fs");
          const path = require("path");

          const dir = "./summaries";
          let report = "## ⚠️ CI Diagnostics Report\n";

          let files = [];
          try {
            const walk = (dirPath) => {
              let results = [];
              const list = fs.readdirSync(dirPath);
              list.forEach((file) => {
                const filePath = path.join(dirPath, file);
                const stat = fs.statSync(filePath);
                if (stat && stat.isDirectory()) {
                  results = results.concat(walk(filePath));
                } else if (file.endsWith("-report.json")) {
                  results.push(filePath);
                }
              });
              return results;
            };

            files = walk(dir);
          } catch (e) {
            report += "\n⚠️ No summaries directory found.";
          }

          console.log("📂 Found report files:", files);

          const expected = ["frontend","backend","coverage"];
          const present = new Set(files.map(f => f.split(path.sep)[1]));
          const missing = expected.filter(name => !present.has(name));

          if (missing.length) {
            report += "\n⚠️ Missing summaries: " + missing.join(", ") + "\n";
            fs.writeFileSync("missing.json", JSON.stringify(missing, null, 2));
          } else {
            fs.writeFileSync("missing.json", JSON.stringify([], null, 2));
          }

          let totalErrors = 0, totalWarnings = 0;

          if (!files.length) {
            report += "\n⚠️ No summary reports found (some jobs may have been skipped).";
          } else {
            report += "\n### 📊 Summary Table\n";
            report += "| Workflow/Job | Errors | Warnings |\n";
            report += "|--------------|--------|----------|\n";

            for (const file of files) {
              const raw = JSON.parse(fs.readFileSync(file, "utf-8"));
              totalErrors += raw.errors.length;
              totalWarnings += raw.warnings.length;

              report += `| ${raw.workflow}/${raw.job} | ${raw.errors.length} | ${raw.warnings.length} |\n`;
            }

            report += "\n---\n";

            for (const file of files) {
              const raw = JSON.parse(fs.readFileSync(file, "utf-8"));
              report += `\n### ${raw.workflow} / ${raw.job}\n`;
              report += `Status: ${raw.status}\n`;
              if (raw.errors.length) {
                report += "\n❌ Errors:\n";
                raw.errors.forEach(e => {
                  report += `- ${e.file}:${e.line||"?"} ${e.message} (rule: ${e.rule}) [${e.severity}]\n`;
                  if (e.suggestion) report += `  💡 Suggestion: ${e.suggestion}\n`;
                  if (e.details) report += `  🔍 Details: ${e.details}\n`;
                });
              }
              if (raw.warnings.length) {
                report += "\n⚠️ Warnings:\n";
                raw.warnings.forEach(w => {
                  report += `- ${w.file}:${w.line||"?"} ${w.message} (rule: ${w.rule}) [${w.severity}]\n`;
                  if (w.suggestion) report += `  💡 Suggestion: ${w.suggestion}\n`;
                  if (w.details) report += `  🔍 Details: ${w.details}\n`;
                });
              }
              if (raw.notices.length) {
                report += "\nℹ️ Notices:\n";
                raw.notices.forEach(n => {
                  report += `- ${n.file}:${n.line||"?"} ${n.message}\n`;
                });
              }
            }
          }

          fs.writeFileSync("report.md", report);
          fs.writeFileSync("diagnostics-meta.json", JSON.stringify({ totalErrors, totalWarnings }, null, 2));
          console.log(report);
          '

      - name: Sync diagnostics to Linear
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const token = process.env.LINEAR_API_KEY.trim();
            const teamId = process.env.LINEAR_TEAM_ID.trim();
            const commit = process.env.GITHUB_SHA;
            const branch = process.env.GITHUB_REF_NAME;

            const description = fs.existsSync('report.md') ? fs.readFileSync('report.md', 'utf8') : "⚠️ CI Diagnostics failed to generate report.";
            const meta = fs.existsSync('diagnostics-meta.json') ? JSON.parse(fs.readFileSync('diagnostics-meta.json', 'utf8')) : { totalErrors: 0, totalWarnings: 0 };
            const missing = fs.existsSync('missing.json') ? JSON.parse(fs.readFileSync('missing.json', 'utf8')) : [];
            const title = `CI Diagnostics (${branch}, ${commit.substring(0,7)})`;

            let labels = [];
            if (meta.totalErrors > 0) labels.push("ci-error");
            else if (meta.totalWarnings > 0) labels.push("ci-warning");
            else labels.push("ci-success");
            if (missing.length) labels.push("ci-incomplete");

            const commitUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${commit}`;
            const branchUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/tree/${branch}`;

            const fullDescription = description + (missing.length ? `\n\n⚠️ Missing summaries: ${missing.join(", ")}` : "") + `\n\n🔗 Commit: ${commitUrl}\n🔗 Branch: ${branchUrl}`;

            async function runQuery(query, variables = {}) {
              const res = await fetch("https://api.linear.app/graphql", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  "Authorization": `Bearer ${token}`
                },
                body: JSON.stringify({ query, variables })
              });
              const json = await res.json();
              console.log("🔍 Linear API response:", JSON.stringify(json, null, 2));
              return json;
            }

            const searchQuery = `query Issues($filter: IssueFilter) { issues(filter: $filter, first: 1) { nodes { id url title } } }`;
            const searchVars = { filter: { title: { eq: title } } };
            const existing = await runQuery(searchQuery, searchVars);

            if (existing.data?.issues?.nodes?.length) {
              const issueId = existing.data.issues.nodes[0].id;
              const updateMutation = `mutation IssueUpdate($id: String!, $input: IssueUpdateInput!) { issueUpdate(id: $id, input: $input) { success issue { id url } } }`;
              const updateVars = { id: issueId, input: { description: fullDescription, teamId, labelIds: labels } };
              const updated = await runQuery(updateMutation, updateVars);
              if (!updated?.data?.issueUpdate?.success) {
                throw new Error("❌ Failed to update Linear issue");
              }
              fs.appendFileSync('report.md', `\n\n🔄 Updated Linear issue: ${updated?.data?.issueUpdate?.issue?.url || 'n/a'}`);
            } else {
              const createMutation = `mutation IssueCreate($input: IssueCreateInput!) { issueCreate(input: $input) { success issue { id url } } }`;
              const createVars = { input: { title, description: fullDescription, teamId, labelIds: labels } };
              const created = await runQuery(createMutation, createVars);
              if (!created?.data?.issueCreate?.success) {
                throw new Error("❌ Failed to create Linear issue");
              }
              fs.appendFileSync('report.md', `\n\n🆕 Created Linear issue: ${created?.data?.issueCreate?.issue?.url || 'n/a'}`);
            }

      - name: Complete CI Diagnostics check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const meta = fs.existsSync('diagnostics-meta.json') ? JSON.parse(fs.readFileSync('diagnostics-meta.json','utf-8')) : { totalErrors: 0, totalWarnings: 0 };
            const summary = fs.existsSync('report.md') ? fs.readFileSync('report.md', 'utf8').slice(0, 60000) : "⚠️ Report missing.";
            const missing = fs.existsSync('missing.json') ? JSON.parse(fs.readFileSync('missing.json','utf-8')) : [];

            let conclusion = "success";
            if (meta.totalErrors > 0) conclusion = "failure";
            else if (meta.totalWarnings > 0) conclusion = "neutral";
            if (missing.length) conclusion = "neutral";

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "CI Diagnostics (Central)",
              head_sha: process.env.GITHUB_SHA,
              status: "completed",
              conclusion,
              output: {
                title: "CI Diagnostics Report",
                summary
              }
            });