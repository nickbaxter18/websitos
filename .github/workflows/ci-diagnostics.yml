name: CI Diagnostics

on:
  workflow_run:
    workflows: ["*"]
    types:
      - completed

jobs:
  analyze-diagnostics:
    if: |
      github.event.workflow_run.name != 'Analyze (javascript)' &&
      github.event.workflow_run.name != 'Analyze (python)'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download logs from completed workflow
        uses: actions/download-artifact@v4
        with:
          path: diagnostics-logs

      - name: Validate artifact presence
        id: validate
        run: |
          if [ ! -d "diagnostics-logs" ] || [ -z "$(ls -A diagnostics-logs)" ]; then
            echo "⚠️ Warning: No diagnostics logs were uploaded by the triggering workflow." >&2
            echo "logs_present=false" >> $GITHUB_OUTPUT
          else
            echo "logs_present=true" >> $GITHUB_OUTPUT
          fi

      - name: Gather failure and warning summary with classification
        id: classify
        run: |
          echo "## ⚠️ CI Diagnostics Report" > report.md
          echo "Workflow: ${{ github.event.workflow_run.name }}" >> report.md
          echo "Commit: ${{ github.event.workflow_run.head_sha }}" >> report.md
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}" >> report.md
          echo "---" >> report.md

          if [ "${{ steps.validate.outputs.logs_present }}" == "true" ]; then
            ERRORS=$(grep -iE "(error|fail|exception|missing|denied)" -R diagnostics-logs | head -n 500 || true)
            WARNINGS=$(grep -iE "(warn|warning|deprecated)" -R diagnostics-logs | head -n 500 || true)
            STACK=$(grep -iE "(Traceback|Error:|Exception:)" -R diagnostics-logs | head -n 20 || true)
          else
            ERRORS=""
            WARNINGS=""
            STACK=""
          fi

          ERROR_COUNT=$(echo "$ERRORS" | grep -c . || true)
          WARNING_COUNT=$(echo "$WARNINGS" | grep -c . || true)

          echo "error_count=$ERROR_COUNT" >> $GITHUB_OUTPUT
          echo "warning_count=$WARNING_COUNT" >> $GITHUB_OUTPUT

          if [ "${{ steps.validate.outputs.logs_present }}" != "true" ]; then
            echo "⚠️ No logs were available for analysis." >> report.md
          fi

      - name: Gather GitHub Check Annotations
        id: annotations
        uses: actions/github-script@v7
        with:
          script: |
            const runId = ${{ github.event.workflow_run.id }};
            const { data: jobs } = await github.rest.actions.listJobsForWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });

            let warnings = [];
            let errors = [];

            for (const job of jobs.jobs) {
              const { data: annots } = await github.rest.checks.listAnnotations({
                owner: context.repo.owner,
                repo: context.repo.repo,
                check_run_id: job.id
              });
              for (const a of annots) {
                if (a.annotation_level === 'failure') errors.push(a.message);
                if (a.annotation_level === 'warning') warnings.push(a.message);
              }
            }

            console.log("Annotations fetched:", { errors, warnings });
            core.setOutput("errors", errors.join("\n"));
            core.setOutput("warnings", warnings.join("\n"));

      - name: Sync Linear issue (logs or annotations)
        if: steps.classify.outputs.error_count != '0' || steps.classify.outputs.warning_count != '0' || steps.annotations.outputs.errors != '' || steps.annotations.outputs.warnings != '' || steps.validate.outputs.logs_present != 'true'
        uses: actions/github-script@v7
        env:
          LINEAR_API_KEY: ${{ secrets.LINEAR_API_KEY }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
        with:
          script: |
            const fetch = require('node-fetch');
            const fs = require('fs');

            async function callLinear(query, variables, retries = 3) {
              for (let i = 0; i < retries; i++) {
                const res = await fetch("https://api.linear.app/graphql", {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    "Authorization": `Bearer ${process.env.LINEAR_API_KEY}`
                  },
                  body: JSON.stringify({ query, variables })
                });
                const json = await res.json();
                console.log("Linear API response attempt", i + 1, JSON.stringify(json, null, 2));
                if (res.ok && !json.errors) return json;
                if (i < retries - 1) {
                  console.log("Retrying Linear API call...");
                  await new Promise(r => setTimeout(r, 1000 * (i+1)));
                }
              }
              throw new Error("Linear API request failed after retries");
            }

            const classification = '${{ steps.classify.outputs.class || "unknown" }}';
            const workflow = '${{ github.event.workflow_run.name }}';
            const commit = '${{ github.event.workflow_run.head_sha }}';

            const logErrors = '${{ steps.classify.outputs.error_count }}';
            const logWarnings = '${{ steps.classify.outputs.warning_count }}';
            const checkErrors = `${{ steps.annotations.outputs.errors }}`;
            const checkWarnings = `${{ steps.annotations.outputs.warnings }}`;

            let description = fs.readFileSync('report.md', 'utf8')
              .replace(/(password|secret|token|apikey|jwt|bearer|auth|key|cred)\s*[:=]\s*\S+/gi, "[REDACTED]");

            if ("${{ steps.validate.outputs.logs_present }}" != "true") {
              description += "\n⚠️ No logs were available from the triggering workflow.";
            }

            const title = `CI Diagnostics from ${workflow}`;

            // First try to find existing issue with same title
            const searchQuery = `query Issues($filter: IssueFilter) { issues(filter: $filter, first: 1) { nodes { id url title }}}`;
            const searchVars = { filter: { team: { id: { eq: process.env.LINEAR_TEAM_ID } }, title: { eq: title } } };
            const existing = await callLinear(searchQuery, searchVars);

            let query, variables;
            if (existing.data?.issues?.nodes?.length) {
              const issueId = existing.data.issues.nodes[0].id;
              query = `mutation IssueUpdate($id: String!, $input: IssueUpdateInput!) { issueUpdate(id: $id, input: $input) { success issue { id url } } }`;
              variables = { id: issueId, input: { description } };
              console.log("Updating existing Linear issue:", existing.data.issues.nodes[0].url);
            } else {
              query = `mutation IssueCreate($input: IssueCreateInput!) { issueCreate(input: $input) { success issue { id url } } }`;
              variables = { input: { teamId: process.env.LINEAR_TEAM_ID, title, description, labelIds: [] } };
              console.log("Creating new Linear issue");
            }

            try {
              const result = await callLinear(query, variables);
              console.log("Final Linear API result:", JSON.stringify(result, null, 2));
            } catch (err) {
              core.setFailed("Linear API sync failed: " + err.message);
            }

      - name: Update CI Diagnostics Check
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const conclusion = "${{ job.status }}" === "success" ? "success" : "failure";
            const fs = require('fs');
            const summary = fs.readFileSync('report.md', 'utf8').slice(0, 60000);
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "CI Diagnostics",
              head_sha: "${{ github.event.workflow_run.head_sha }}",
              status: "completed",
              conclusion: conclusion,
              output: {
                title: "CI Diagnostics Report",
                summary
              }
            });