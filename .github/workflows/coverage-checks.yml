name: Coverage Checks

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: true
      matrix:
        task: [frontend, backend, e2e]
    defaults:
      run:
        working-directory: .
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable problem matchers
        run: |
          echo "::add-matcher::.github/matchers/error.json"
          echo "::add-matcher::.github/matchers/python.json"
          echo "::add-matcher::.github/matchers/ts.json"

      - name: Setup Node.js (for frontend/e2e)
        if: ${{ matrix.task != 'backend' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm (for frontend/e2e)
        if: ${{ matrix.task != 'backend' }}
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Cache pnpm (for frontend/e2e)
        if: ${{ matrix.task != 'backend' }}
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}-v3

      - name: Setup Python (for backend)
        if: ${{ matrix.task == 'backend' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip wheels (for backend)
        if: ${{ matrix.task == 'backend' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}-v2
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install frontend dependencies
        if: ${{ matrix.task == 'frontend' || matrix.task == 'e2e' }}
        run: pnpm install --frozen-lockfile

      - name: Install backend dependencies
        if: ${{ matrix.task == 'backend' }}
        run: |
          python -m pip install --upgrade pip
          echo ">>> Installing backend dependencies"
          pip install --prefer-binary -r requirements.txt || pip install -r requirements.txt

      - name: Run frontend coverage (Jest)
        if: ${{ matrix.task == 'frontend' }}
        run: |
          echo ">>> Running Jest with coverage"
          pnpm test:ci -- --coverage --coverageDirectory=coverage/frontend || { echo "❌ Jest found 0 tests"; exit 1; }

      - name: Run backend coverage (Pytest)
        if: ${{ matrix.task == 'backend' }}
        run: |
          echo ">>> Running Pytest with coverage"
          pytest --cov=backend --cov=api --cov-report=xml:coverage/backend/coverage.xml --cov-report=term-missing || EXIT=$?
          echo ">>> Pytest finished with exit code ${EXIT:-0}"
          exit ${EXIT:-0}

      - name: Run e2e coverage (Playwright)
        if: ${{ matrix.task == 'e2e' }}
        run: |
          echo ">>> Building frontend with coverage instrumentation"
          NODE_ENV=test pnpm build
          echo ">>> Running Playwright with NYC coverage"
          pnpm exec nyc --reporter=lcov --report-dir=coverage/e2e pnpm exec playwright test || EXIT=$?
          echo ">>> Playwright finished with exit code ${EXIT:-0}"
          exit ${EXIT:-0}

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.task }}
          path: coverage/${{ matrix.task }}

  upload-codecov:
    needs: coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage

      - name: Verify Coverage Files
        run: |
          echo "📂 Coverage directory contents:" && ls -R coverage || true

      - name: Upload aggregated coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          directory: coverage
          commit_parent: ${{ github.sha }}
          fail_ci_if_error: false