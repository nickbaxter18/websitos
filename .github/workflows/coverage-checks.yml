name: Coverage Checks

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        task: [frontend, backend, backend-node, e2e]
    defaults:
      run:
        working-directory: .
    env:
      NODE_OPTIONS: "--experimental-vm-modules"
      LOGS_API_TOKEN: ${{ secrets.LOGS_API_TOKEN }}
    steps:
      - name: Checkout repository (robust)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true
          lfs: false
          submodules: false

      - name: Setup Node.js (for frontend/e2e/backend-node)
        if: ${{ matrix.task != 'backend' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm (for frontend/e2e/backend-node)
        if: ${{ matrix.task == 'frontend' || matrix.task == 'e2e' || matrix.task == 'backend-node' }}
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Cache pnpm (for frontend/e2e/backend-node)
        if: ${{ matrix.task == 'frontend' || matrix.task == 'e2e' || matrix.task == 'backend-node' }}
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ matrix.task }}-${{ hashFiles('**/pnpm-lock.yaml') }}-v1

      - name: Setup Python (for backend)
        if: ${{ matrix.task == 'backend' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip wheels (for backend)
        if: ${{ matrix.task == 'backend' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-backend-${{ hashFiles('**/requirements.txt') }}-v1
          restore-keys: |
            ${{ runner.os }}-pip-backend-

      - name: Provide env file for validation
        run: cp .env.ci .env.example

      - name: Install frontend dependencies (with retry)
        if: ${{ matrix.task == 'frontend' }}
        run: |
          for i in 1 2 3; do
            pnpm install --frozen-lockfile && break || (echo "❌ pnpm install failed, retrying..." && sleep 10)
          done

      - name: Install backend dependencies (Python)
        if: ${{ matrix.task == 'backend' }}
        run: |
          python -m pip install --upgrade pip
          for i in 1 2 3; do
            pip install --prefer-binary -r requirements.txt && break || (echo "❌ pip install failed, retrying..." && sleep 10)
          done

      - name: Ensure nyc installed (backend)
        if: ${{ matrix.task == 'backend' }}
        run: npm install -g nyc

      - name: Run frontend coverage (force reporters)
        if: ${{ matrix.task == 'frontend' }}
        run: |
          mkdir -p logs
          pnpm jest --config jest.config.cjs --coverage --all --passWithNoTests=false \
            --coverageReporters=lcov --coverageReporters=text --coverageReporters=json-summary --coverageReporters=cobertura \
            --coverageDirectory=coverage/frontend 2>&1 | tee logs/frontend.log
          echo $? > logs/exit-code.txt

      - name: Run backend coverage (Pytest with branch coverage + threshold)
        if: ${{ matrix.task == 'backend' }}
        run: |
          mkdir -p coverage/backend logs
          pytest backend/tests --maxfail=1 --disable-warnings -q \
            --cov=./backend --cov-branch --cov-append \
            --cov-report=xml:coverage/backend/coverage.xml \
            --cov-report=lcov:coverage/backend/lcov.info \
            --cov-report=json:coverage/backend/coverage.json \
            --cov-report=term-missing \
            --cov-fail-under=0 2>&1 | tee logs/backend.log
          echo $? > logs/exit-code.txt

      - name: Run backend-node coverage (Jest)
        if: ${{ matrix.task == 'backend-node' }}
        run: |
          mkdir -p logs
          cd backend
          pnpm install --frozen-lockfile
          pnpm exec jest --config jest.config.cjs --coverage --passWithNoTests --verbose --runInBand --detectOpenHandles --testLocationInResults \
            --coverageReporters=lcov 2>&1 | tee ../logs/backend-node.log
          echo $? > ../logs/exit-code.txt

      - name: Run e2e coverage (Playwright with instrumentation)
        if: ${{ matrix.task == 'e2e' }}
        run: |
          mkdir -p coverage/e2e logs
          pnpm install --frozen-lockfile
          pnpm exec playwright install chromium

          VITE_COVERAGE=true NODE_ENV=test pnpm vite build --config vite.config.ts | tee logs/vite-debug.log

          if ! grep -q "Istanbul instrumentation ENABLED" logs/vite-debug.log; then
            echo "❌ Istanbul instrumentation not enabled in Vite build"
            exit 1
          fi

          nohup pnpm vite preview --port=4173 > logs/preview.log 2>&1 &
          sleep 5

          pnpm exec playwright test --reporter=list --require tests/playwright-coverage-hook.ts || true

          if [ -d .nyc_output ] && [ "$(ls -A .nyc_output)" ]; then
            npx nyc merge .nyc_output coverage/e2e/coverage-merged.json || true
            npx nyc report --reporter=lcov --report-dir=coverage/e2e --temp-dir=coverage/e2e || true
          else
            npx nyc --reporter=lcov --report-dir=coverage/e2e pnpm exec playwright test --reporter=list || true
          fi

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.task }}
          path: coverage/${{ matrix.task }}
          retention-days: 1

      - name: Upload full logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.task }}
          path: logs

      - name: Extract errors
        if: failure()
        run: |
          grep -A 5 -B 5 -iE "error|fail|warn|exception" logs/${{ matrix.task }}*.log > logs/errors.log || echo "No errors found." > logs/errors.log

      - name: Build debug report
        if: failure()
        run: |
          mkdir -p logs
          echo "## 🚨 Coverage Debug Report – ${{ matrix.task }}" > logs/debug-report.md
          echo "" >> logs/debug-report.md
          head -n 100 logs/errors.log >> logs/debug-report.md
          echo "" >> logs/debug-report.md
          echo "### ❌ Exit Code" >> logs/debug-report.md
          cat logs/exit-code.txt >> logs/debug-report.md || echo "Unknown" >> logs/debug-report.md
          echo "" >> logs/debug-report.md
          if [ -f coverage/${{ matrix.task }}/coverage-summary.json ]; then
            echo "### 📊 Coverage Summary" >> logs/debug-report.md
            cat coverage/${{ matrix.task }}/coverage-summary.json | jq '.total' >> logs/debug-report.md
          fi
          echo "" >> logs/debug-report.md
          echo "### ⚙️ Environment" >> logs/debug-report.md
          echo "- Branch: $GITHUB_REF_NAME" >> logs/debug-report.md
          echo "- Commit: $GITHUB_SHA" >> logs/debug-report.md
          echo "- Node: $(node -v)" >> logs/debug-report.md
          echo "- Runner: $RUNNER_OS" >> logs/debug-report.md

      - name: Post debug report as PR comment
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage-${{ matrix.task }}-debug
          path: logs/debug-report.md

  coverage-smoke:
    runs-on: ubuntu-latest
    continue-on-error: true   # 🚫 Non-blocking
    env:
      LOGS_API_TOKEN: ${{ secrets.LOGS_API_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
      - uses: pnpm/action-setup@v2
        with:
          version: 10
      - run: pnpm install --frozen-lockfile
      - run: |
          mkdir -p logs
          pnpm jest --config jest.smoke.config.cjs --coverage 2>&1 | tee logs/smoke.log || echo "⚠️ Smoke failed, continuing"
      - uses: actions/upload-artifact@v4
        with:
          name: coverage-smoke
          path: coverage/smoke
      - name: Upload smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-smoke
          path: logs
      - name: Build smoke debug report
        if: failure()
        run: |
          mkdir -p logs
          echo "## 🚨 Coverage Debug Report – smoke" > logs/debug-report.md
          echo "" >> logs/debug-report.md
          grep -A 5 -B 5 -iE "error|fail|warn|exception" logs/smoke.log > logs/errors.log || echo "No errors found." > logs/errors.log
          head -n 100 logs/errors.log >> logs/debug-report.md
      - name: Post smoke debug report as PR comment
        if: failure()
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: coverage-smoke-debug
          path: logs/debug-report.md

  upload-codecov:
    needs: [coverage, coverage-smoke]
    runs-on: ubuntu-latest
    environment: websitos
    env:
      LOGS_API_TOKEN: ${{ secrets.LOGS_API_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./coverage

      - name: Normalize and merge coverage files
        run: |
          mkdir -p coverage/merged
          for file in coverage/coverage-*/lcov.info coverage/coverage-smoke/lcov.info; do
            sed -i "s|/home/runner/work/websitos/websitos/||g" $file || true
            cat $file >> coverage/merged/lcov.info || true
          done
          echo "✅ Final merged lcov preview:" && head -n 50 coverage/merged/lcov.info

      - name: Upload merged coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage/merged/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_API_TOKEN: ${{ secrets.CODECOV_API_TOKEN }}

      - name: Query Codecov API for raw coverage
        run: |
          echo "📡 Waiting 10s before fetching raw coverage..."
          sleep 10
          curl -s \
            -H "Authorization: token $CODECOV_API_TOKEN" \
            https://api.codecov.io/api/v2/gh/${{ github.repository }}/commits/${{ github.sha }} \
            | jq . > codecov_raw.json
          echo "✅ Raw coverage saved to codecov_raw.json"

      - name: Summarize coverage in logs (totals)
        run: |
          echo "📊 Codecov Coverage Totals:" 
          cat codecov_raw.json | jq '.commit.totals'

      - name: Summarize coverage in logs (per-file)
        continue-on-error: true
        run: |
          echo "📂 Per-file coverage:"
          if jq -e '.files' codecov_raw.json >/dev/null; then
            cat codecov_raw.json | jq -r '.files[]? | "\(.filename): \(.coverage.percent // \"N/A\")% (\(.coverage.covered // 0)/\(.coverage.lines // 0) lines)"'
          else
            echo "⚠️ No per-file coverage data available from Codecov"
          fi

      - name: Upload raw Codecov JSON artifact
        uses: actions/upload-artifact@v4
        with:
          name: codecov-raw
          path: codecov_raw.json
          retention-days: 7