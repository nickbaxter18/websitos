name: Coverage Checks

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  coverage:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        task: [frontend, backend, backend-node, e2e]
    defaults:
      run:
        working-directory: .
    env:
      NODE_OPTIONS: "--experimental-vm-modules"
      LOGS_API_TOKEN: ${{ secrets.LOGS_API_TOKEN }}
    steps:
      - name: Checkout repository (robust)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          clean: true
          lfs: false
          submodules: false

      - name: Setup Node.js (for frontend/e2e/backend-node)
        if: ${{ matrix.task != 'backend' }}
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm (for frontend/e2e/backend-node)
        if: ${{ matrix.task == 'frontend' || matrix.task == 'e2e' || matrix.task == 'backend-node' }}
        uses: pnpm/action-setup@v2
        with:
          version: 10

      - name: Ensure pnpm store exists
        if: ${{ matrix.task == 'frontend' || matrix.task == 'e2e' || matrix.task == 'backend-node' }}
        run: mkdir -p ~/.pnpm-store

      - name: Cache pnpm store
        if: ${{ matrix.task == 'frontend' || matrix.task == 'e2e' || matrix.task == 'backend-node' }}
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ matrix.task }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-${{ matrix.task }}-
            ${{ runner.os }}-pnpm-

      - name: Setup Python (for backend)
        if: ${{ matrix.task == 'backend' }}
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip wheels (for backend)
        if: ${{ matrix.task == 'backend' }}
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-backend-${{ hashFiles('**/requirements.txt') }}-v1
          restore-keys: |
            ${{ runner.os }}-pip-backend-

      - name: Provide env file for validation
        run: cp .env.ci .env.example

      - name: Install frontend dependencies (with retry)
        if: ${{ matrix.task == 'frontend' }}
        run: |
          for i in 1 2 3; do
            pnpm install --frozen-lockfile --prefer-offline && break || (echo "❌ pnpm install failed, retrying..." && sleep 10)
          done

      - name: Install backend dependencies (Python)
        if: ${{ matrix.task == 'backend' }}
        run: |
          python -m pip install --upgrade pip
          for i in 1 2 3; do
            pip install --prefer-binary -r requirements.txt && break || (echo "❌ pip install failed, retrying..." && sleep 10)
          done

      - name: Ensure nyc installed (backend)
        if: ${{ matrix.task == 'backend' }}
        run: npm install -g nyc

      - name: Run frontend coverage (force reporters)
        if: ${{ matrix.task == 'frontend' }}
        run: |
          mkdir -p logs coverage/frontend
          pnpm jest --config jest.config.cjs --coverage --all --passWithNoTests=false \
            --coverageReporters=lcov --coverageReporters=text --coverageReporters=json-summary --coverageReporters=cobertura \
            --coverageDirectory=coverage/frontend 2>&1 | tee logs/frontend.log
          echo $? > logs/exit-code.txt

      - name: Run backend coverage (Pytest with branch coverage + threshold)
        if: ${{ matrix.task == 'backend' }}
        run: |
          mkdir -p coverage/backend logs
          pytest backend/tests --maxfail=1 --disable-warnings -q \
            --cov=./backend --cov-branch --cov-append \
            --cov-report=xml:coverage/backend/coverage.xml \
            --cov-report=lcov:coverage/backend/lcov.info \
            --cov-report=json:coverage/backend/coverage-summary.json \
            --cov-report=term-missing \
            --cov-fail-under=0 2>&1 | tee logs/backend.log
          echo $? > logs/exit-code.txt

      - name: Run backend-node coverage (Jest)
        if: ${{ matrix.task == 'backend-node' }}
        run: |
          mkdir -p logs backend/coverage
          cd backend
          for i in 1 2 3; do
            pnpm install --frozen-lockfile --prefer-offline && break || (echo "❌ pnpm install failed, retrying..." && sleep 10)
          done
          pnpm exec jest --config jest.config.cjs --coverage --passWithNoTests --verbose --runInBand --detectOpenHandles --testLocationInResults \
            --coverageReporters=lcov --coverageReporters=json-summary --coverageDirectory=coverage \
            2>&1 | tee ../logs/backend-node.log
          echo $? > ../logs/exit-code.txt

      - name: Run e2e coverage (Playwright with instrumentation)
        if: ${{ matrix.task == 'e2e' }}
        run: |
          mkdir -p coverage/e2e logs
          for i in 1 2 3; do
            pnpm install --frozen-lockfile --prefer-offline && break || (echo "❌ pnpm install failed, retrying..." && sleep 10)
          done
          pnpm exec playwright install chromium

          VITE_COVERAGE=true NODE_ENV=test pnpm vite build --config vite.config.ts | tee logs/vite-debug.log

          if ! grep -q "Istanbul instrumentation ENABLED" logs/vite-debug.log; then
            echo "❌ Istanbul instrumentation not enabled in Vite build"
            exit 1
          fi

          nohup pnpm vite preview --port=4173 > logs/preview.log 2>&1 &
          sleep 5

          pnpm exec playwright test --reporter=list --require tests/playwright-coverage-hook.ts || true

          if [ -d .nyc_output ] && [ "$(ls -A .nyc_output)" ]; then
            npx nyc merge .nyc_output coverage/e2e/coverage-merged.json || true
            npx nyc report --reporter=lcov --report-dir=coverage/e2e --temp-dir=coverage/e2e || true
            npx nyc report --reporter=json-summary --report-dir=coverage/e2e --temp-dir=coverage/e2e || true
          else
            npx nyc --reporter=lcov --report-dir=coverage/e2e --reporter=json-summary --report-dir=coverage/e2e pnpm exec playwright test --reporter=list || true
          fi

      - name: Upload standardized coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.task }}
          path: coverage/${{ matrix.task }}/coverage-summary.json
          retention-days: 7

      - name: Upload full coverage folder
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.task }}-full
          path: coverage/${{ matrix.task }}
          retention-days: 7

      - name: Upload full logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ matrix.task }}
          path: logs

  upload-codecov:
    needs: [coverage]
    runs-on: ubuntu-latest
    environment: websitos
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download all coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./coverage-artifacts

      - name: Merge coverage files
        run: |
          mkdir -p coverage/merged
          find coverage-artifacts -name "lcov.info" -exec cat {} + > coverage/merged/lcov.info
          echo "✅ Final merged lcov preview:" && head -n 50 coverage/merged/lcov.info

      - name: Upload merged coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: coverage/merged/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_API_TOKEN: ${{ secrets.CODECOV_API_TOKEN }}