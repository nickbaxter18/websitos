name: Render Deploy with Smoke Test

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Websitos
    permissions:
      contents: read
      id-token: write
    env:
      RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
      RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
    outputs:
      deploy_id: ${{ steps.trigger.outputs.deploy_id }}
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify secrets
        run: |
          if [ -z "$RENDER_SERVICE_ID" ] || [ -z "$RENDER_API_KEY" ]; then
            echo "::error::Render secrets missing or not exposed to this job"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies (frontend)
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (backend)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Enable problem matchers
        continue-on-error: true
        run: |
          echo "::add-matcher::.github/matchers/error.json"
          echo "::add-matcher::.github/matchers/generic-errors.json"

      - name: Trigger Render Deploy
        id: trigger
        run: |
          echo "Triggering Render deploy..."
          RESPONSE=$(curl -s -X POST "https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys" \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "accept: application/json" \
            -H "content-type: application/json")

          echo "Response: $RESPONSE"
          DEPLOY_ID=$(echo "$RESPONSE" | jq -r '.id // empty')

          if [ -z "$DEPLOY_ID" ] || [ "$DEPLOY_ID" == "null" ]; then
            echo "::error::Failed to trigger Render deploy (no deploy ID returned)"
            exit 1
          fi

          echo "deploy_id=$DEPLOY_ID" >> $GITHUB_OUTPUT

  smoke:
    runs-on: ubuntu-latest
    needs: deploy
    continue-on-error: true
    steps:
      - name: Checkout repository (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Enable problem matchers
        continue-on-error: true
        run: |
          echo "::add-matcher::.github/matchers/error.json"
          echo "::add-matcher::.github/matchers/generic-errors.json"

      - name: Wait for Render Deploy to Complete
        run: |
          DEPLOY_ID=${{ needs.deploy.outputs.deploy_id }}
          echo "Waiting for Render deploy $DEPLOY_ID to complete..."

          for i in {1..30}; do
            STATUS=$(curl -s "https://api.render.com/v1/deploys/$DEPLOY_ID" \
              -H "Authorization: Bearer $RENDER_API_KEY" | jq -r '.status // empty')

            echo "Attempt $i: Status = $STATUS"

            if [ "$STATUS" == "live" ]; then
              echo "✅ Deploy is live"
              break
            fi

            if [ "$STATUS" == "failed" ]; then
              echo "::error::Deploy failed"
              exit 1
            fi

            sleep 10
          done

      - name: Define endpoint check function
        run: |
          cat > check_endpoint.sh <<'EOF'
          #!/bin/bash
          URL=$1
          NAME=$2
          MAX_RETRIES=5
          DELAY=5

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Checking $NAME at $URL (attempt $i/$MAX_RETRIES)..."
            RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -o response.txt "$URL" || true)
            BODY=$(cat response.txt)
            STATUS=$(echo $RESPONSE | sed -e 's/.*HTTPSTATUS://')

            if [ "$STATUS" -eq 200 ]; then
              echo "✅ $NAME OK"
              echo "$BODY" | head -n 20
              break
            else
              echo "⚠️ $NAME failed with status $STATUS"
              echo "Response body (truncated):"
              echo "$BODY" | head -n 20
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Retrying in $DELAY seconds..."
                sleep $DELAY
                DELAY=$((DELAY*2))
              else
                echo "::error::$NAME check failed after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          EOF
          chmod +x check_endpoint.sh

      - name: Check API Health
        run: ./check_endpoint.sh https://websitos.onrender.com/api/health "API Health"

      - name: Check Extended Status
        run: ./check_endpoint.sh https://websitos.onrender.com/api/status "API Extended Status"

      - name: Check Root Health
        run: ./check_endpoint.sh https://websitos.onrender.com/health "Root Health"

      - name: Check Frontend Homepage
        run: ./check_endpoint.sh https://websitos.onrender.com/ "Frontend Homepage"

      - name: Upload Smoke Test Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: smoke-test-logs
          path: response.txt
          retention-days: 14