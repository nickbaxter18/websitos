name: Capture Failure Summary

on:
  workflow_call:
    inputs:
      job_name:
        required: true
        type: string
      step_name:
        required: false
        type: string
        default: "unknown-step"

jobs:
  failure-summary:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Collect failure info (runs only if job failed)
        run: |
          mkdir -p summary logs
          TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

          EXIT_CODE_FILE="exit_code.log"
          EXIT_CODE=$(cat $EXIT_CODE_FILE 2>/dev/null || echo "unknown")

          # Aggregate logs if present
          ALL_STDERR=$(find logs -name "*.stderr.log" -exec tail -n 50 {} + 2>/dev/null || echo "No stderr captured")
          ALL_STDOUT=$(find logs -name "*.stdout.log" -exec tail -n 50 {} + 2>/dev/null || echo "No stdout captured")

          # Try to detect failed step (best effort)
          FAILED_STEP=$(grep -i "Error" -m1 logs/*.stderr.log 2>/dev/null || echo "${{ inputs.step_name }}")

          # Custom tagging for deploy-related failures
          if echo "$ALL_STDERR" | grep -qi "API health check failed"; then
            TAGGED_ERROR="ðŸš¨ API health check failed during deployment"
          elif echo "$ALL_STDERR" | grep -qi "API extended status check failed"; then
            TAGGED_ERROR="ðŸš¨ API extended status endpoint failed"
          elif echo "$ALL_STDERR" | grep -qi "Root health check failed"; then
            TAGGED_ERROR="ðŸš¨ Root health check failed"
          else
            TAGGED_ERROR=$(echo "$ALL_STDERR" | head -n 1)
          fi

          # Calculate job duration (fallback -1 if unavailable)
          START_TIME=$(date -d "$GITHUB_RUN_STARTED_AT" +%s 2>/dev/null || echo 0)
          NOW=$(date +%s)
          DURATION=$(( NOW - START_TIME ))

          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/$GITHUB_RUN_ID"

          # Always generate JSON if failure occurs
          cat > summary/failure-summary-${{ inputs.job_name }}.json <<EOF
          {
            "run_id": $GITHUB_RUN_ID,
            "job": "${{ inputs.job_name }}",
            "step": "$FAILED_STEP",
            "exit_code": "$EXIT_CODE",
            "error": "$TAGGED_ERROR",
            "stdout_tail": $(echo "$ALL_STDOUT" | jq -R -s -c 'split("\n")'),
            "stderr_tail": $(echo "$ALL_STDERR" | jq -R -s -c 'split("\n")'),
            "git": {
              "commit": "${{ github.sha }}",
              "branch": "${{ github.ref_name }}",
              "pr_number": "${{ github.event.pull_request.number || '' }}"
            },
            "triggered_by": "${{ github.actor }}",
            "environment": {
              "os": "${{ runner.os }}",
              "node": "$(node -v || echo 'not installed')",
              "python": "$(python3 --version 2>/dev/null || echo 'not installed')"
            },
            "duration_seconds": $DURATION,
            "workflow_url": "$WORKFLOW_URL",
            "timestamp": "$TIMESTAMP"
          }
          EOF

          # Create annotation for GitHub UI
          if echo "$TAGGED_ERROR" | grep -qi "failed"; then
            echo "::error file=summary/failure-summary-${{ inputs.job_name }}.json,title=Job ${{ inputs.job_name }} failed::$TAGGED_ERROR"
          fi

          # Create fallback debug log
          {
            echo "Run ID: $GITHUB_RUN_ID"
            echo "Job: ${{ inputs.job_name }}"
            echo "Step: $FAILED_STEP"
            echo "Exit Code: $EXIT_CODE"
            echo "Timestamp: $TIMESTAMP"
            echo "Git SHA: ${{ github.sha }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Actor: ${{ github.actor }}"
            echo "Duration: $DURATION"
            echo "Workflow URL: $WORKFLOW_URL"
            echo "--- STDERR ---"
            echo "$ALL_STDERR"
            echo "--- STDOUT ---"
            echo "$ALL_STDOUT"
          } > summary/failure-debug-${{ inputs.job_name }}.log

      - name: Generate PR-friendly summary table
        run: |
          {
            echo "### ðŸš¨ Failure Summary for ${{ inputs.job_name }}"
            echo "| Step | Exit Code | Error Message |"
            echo "|------|-----------|---------------|"
            echo "| $FAILED_STEP | $EXIT_CODE | $TAGGED_ERROR |"
          } > summary/pr-summary-${{ inputs.job_name }}.md

      - name: Upload failure summary folder (only if failure)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: failure-summary-${{ inputs.job_name }}
          path: summary/**
          retention-days: 1