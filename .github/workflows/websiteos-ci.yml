name: WEBSITEOS CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.17.0
          cache: "npm"
      - run: npm ci
      - run: npm run lint
      - run: npm run format:check

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.17.0
          cache: "npm"
      - run: npm ci
      - run: npm test -- --coverage --watchAll=false

  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      # Install system dependencies for pyodbc + Postgres support
      - name: Install ODBC drivers
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev libpq-dev

      # Install Python dependencies
      - run: pip install -r requirements.txt

      # DB Connection Smoke Test (Postgres)
      - name: DB Connection Smoke Test
        run: |
          python - << 'EOF'
          from sqlalchemy import create_engine, text
          try:
              conn_str = "postgresql+psycopg2://testuser:testpass@localhost:5432/testdb"
              engine = create_engine(conn_str)
              with engine.connect() as conn:
                  result = conn.execute(text("SELECT 1"))
                  print("DB Connected ✅:", result.scalar())
          except Exception as e:
              print("DB Connection Failed ❌:", e)
              exit(1)
          EOF

      # Run backend tests with coverage
      - run: pytest --maxfail=1 --disable-warnings --cov=. --cov-fail-under=80

  qa-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.17.0
          cache: "npm"
      - run: npm ci
      - run: npm run build
      - run: npx serve -s dist & # serve dist folder in background
      - run: npx lhci autorun --config=lighthouserc.json

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.17.0
          cache: "npm"
      - run: npm ci
      - run: npm audit --audit-level=moderate || true
      - name: Python Security Scan
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - run: pip install bandit
      - run: bandit -r . || true

  build-check:
    runs-on: ubuntu-latest
    needs: [lint-format, frontend-tests, backend-tests, qa-audit, security-scan]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20.17.0
          cache: "npm"
      - run: npm ci
      - run: npm run build

      # Docker with caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            -t websiteos .

      - name: Move Docker cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    runs-on: ubuntu-latest
    needs: [build-check]
    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST "https://api.render.com/deploy/${{ secrets.SERVICE_ID }}" \
          -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"
