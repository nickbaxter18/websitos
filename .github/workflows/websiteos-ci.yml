name: WEBSITEOS CI/CD

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  # -------------------
  # Lint, Format, Type Check
  # -------------------
  lint-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "20.19.0"
          cache: "npm"
      - run: npm ci
      - run: npm run lint -- --fix || true
      - run: npm run format:check || true
      - run: npm run type-check || true

  # -------------------
  # Frontend Tests
  # -------------------
  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: "20.19.0"
          cache: "npm"
      - run: npm ci
      - run: npm test -- -- --coverage --json --outputFile=jest-report.json || true

      - name: Upload frontend artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage
          path: |
            coverage/
            jest-report.json
            coverage/lcov.info

  # -------------------
  # Backend Tests
  # -------------------
  backend-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U testuser -d testdb"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install ODBC + Postgres deps
        run: sudo apt-get update && sudo apt-get install -y unixodbc-dev libpq-dev

      - name: Install Python deps
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-json-report pytest-cov

      - name: DB Connection Smoke Test
        run: |
          python - << 'EOF'
          from sqlalchemy import create_engine, text
          try:
              engine = create_engine("postgresql+psycopg2://testuser:testpass@localhost:5432/testdb")
              with engine.connect() as conn:
                  print("DB Connected ✅:", conn.execute(text("SELECT 1")).scalar())
          except Exception as e:
              print("DB Connection Failed ❌:", e)
              exit(1)
          EOF

      - name: Run backend tests with coverage
        run: |
          PYTHONPATH=. pytest tests --maxfail=1 --disable-warnings \
            --json-report --json-report-file=pytest-report.json \
            --cov=. --cov-report=xml || true

      - name: Upload backend artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: |
            pytest-report.json
            coverage.xml

  # -------------------
  # Merge Coverage
  # -------------------
  build-check:
    runs-on: ubuntu-latest
    needs: [lint-format, frontend-tests, backend-tests]
    steps:
      - uses: actions/checkout@v3

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-coverage
          path: coverage-frontend

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-coverage
          path: coverage-backend

      - name: Merge coverage reports
        uses: danielpalme/ReportGenerator-GitHub-Action@5.3.7
        with:
          reports: |
            coverage-frontend/coverage/lcov.info;
            coverage-backend/coverage.xml
          targetdir: merged-coverage
          reporttypes: Html;Cobertura

      - name: Upload merged coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: merged-coverage
          path: merged-coverage/

  # -------------------
  # Deploy
  # -------------------
  deploy:
    runs-on: ubuntu-latest
    needs: [build-check]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Render Deploy
        run: |
          curl -X POST "https://api.render.com/deploy/${{ secrets.SERVICE_ID }}" \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}"
