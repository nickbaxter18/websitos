{
  "version": 3,
  "sources": ["../../v2/server/index.ts", "../../v2/server/security.ts", "../../v2/server/checkout.ts", "../../v2/server/webhooks.ts", "../../v2/server/warehouse/db.ts", "../../v2/server/events/ingest.ts", "../../v2/server/schemas/events.v1.json", "../../v2/server/events/router.ts", "../../v2/server/thankyou.ts"],
  "sourcesContent": ["\uFEFFimport express from \"express\";\nimport path from \"path\";\nimport bodyParser from \"body-parser\";\nimport cors from \"cors\";\nimport morgan from \"morgan\";\n\nimport security from \"./security\";\nimport { createSession } from \"./checkout\";\nimport { stripeWebhook } from \"./webhooks\";\nimport { ingest } from \"./events/ingest\";\nimport { thankYouJSON } from \"./thankyou\";\n\nconst app = express();\n\nfunction sendHtmlWithNonce(res: any, filePath: string){\n  const fs = require(\"fs\");\n  const p = require(\"path\");\n  const nonce = (res && res.locals && res.locals.nonce) ? res.locals.nonce : \"\";\n  let html = fs.readFileSync(p.resolve(filePath), \"utf-8\");\n  // add nonce to any <script ...> missing it\n  html = html.replace(/<script(?![^>]*\\bnonce=)([^>]*)>/g, (_m: string, attrs: string) => `<script nonce=\"${nonce}\"${attrs}>`);\n  res.setHeader(\"Content-Type\",\"text/html; charset=utf-8\");\n  res.send(html);\n}\n\n// core middleware\napp.use(cors());\napp.use(morgan(\"tiny\"));\napp.use(bodyParser.json({ limit: \"1mb\" }));\napp.use(security);\n\n// static roots\napp.use(\"/assets\", express.static(path.resolve(\"v2/public/assets\")));\napp.use(express.static(path.resolve(\"v2/public\")));\napp.use(express.static(path.resolve(\"dist\")));\n\n// service worker at root\napp.get(\"/sw.js\", (_req, res) => res.sendFile(path.resolve(\"v2/public/sw.js\")));\n\n// APIs\napp.post(\"/checkout\", createSession);\napp.post(\"/webhooks/stripe\", express.raw({ type: \"application/json\" }), stripeWebhook as any);\napp.post(\"/events\", ingest);\napp.post(\"/api/leads\", async (req, res) => {\n  const { email, consent } = (req.body || {});\n  if (!email || !consent) return res.status(400).json({ ok: false });\n  return res.json({ ok: true });\n});\n\n// thank-you JSON for client\napp.get(\"/thank-you.json\", thankYouJSON);\n\n// pages (nonce-injected)\napp.get(\"/favicon.ico\", (_req, res) => res.status(204).end());\napp.get(\"/thank-you\", (_req, res) => sendHtmlWithNonce(res, \"dist/thank-you.html\"));\napp.get(\"/\", (_req, res) => sendHtmlWithNonce(res, \"dist/page.html\"));\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`[server] listening on :${port}`));\r\nimport { thankYouJSON } from \"./thankyou\";\r\n", "\uFEFFimport helmet from \"helmet\";\nimport type { Request, Response, NextFunction } from \"express\";\n\n/**\n * DEV policy: allow inline + GA/Unpkg/Stripe so injected modules run.\n * Helmet still sets other headers, but NOT CSP (we set it).\n */\nexport default function security(req: Request, res: Response, next: NextFunction){\n  // Let helmet set everything EXCEPT CSP\n  helmet({ contentSecurityPolicy: false })(req, res, () => {\n    const csp = [\n      \"default-src 'self'\",\n      \"script-src 'self' 'unsafe-inline' https://www.googletagmanager.com https://www.google-analytics.com https://unpkg.com https://js.stripe.com\",\n      \"script-src-elem 'self' 'unsafe-inline' https://www.googletagmanager.com https://www.google-analytics.com https://unpkg.com https://js.stripe.com\",\n      \"connect-src 'self' https://www.google-analytics.com\",\n      \"img-src 'self' data: https:\",\n      \"style-src 'self' 'unsafe-inline' https://fonts.googleapis.com\",\n      \"font-src 'self' https://fonts.gstatic.com\",\n      \"frame-src https://js.stripe.com\"\n    ].join('; ');\n    res.setHeader(\"Content-Security-Policy\", csp);\n    res.setHeader(\"X-Frame-Options\",\"DENY\");\n    res.setHeader(\"X-Content-Type-Options\",\"nosniff\");\n    res.setHeader(\"Referrer-Policy\",\"strict-origin-when-cross-origin\");\n    res.setHeader(\"Permissions-Policy\",\"interest-cohort=()\");\n    next();\n  });\n}\r\n", "\uFEFFimport fs from \"fs\";\nimport path from \"path\";\nimport type { Request, Response } from \"express\";\nimport Stripe from \"stripe\";\n\ntype StripeCfg = {\n  mode: \"test\" | \"live\";\n  tenants: Record<string, { test?: { sk?: string }, live?: { sk?: string } }>;\n  products: Record<string, Record<string, string>>;\n};\n\nfunction loadCfg(): StripeCfg {\n  const p = path.resolve(\"v2/config/stripe_config.json\");\n  let raw = fs.readFileSync(p, \"utf-8\");\n  raw = raw.replace(/^\\uFEFF/, \"\");   // strip BOM if present\n  return JSON.parse(raw);\n}\nfunction pickTenant(host?: string){\n  const h=(host||\"\").split(\":\")[0].toLowerCase();\n  const cfg=loadCfg(); return (h in cfg.tenants)?h:\"default\";\n}\n\nexport async function createSession(req:Request,res:Response){\n  try{\n    const cfg = loadCfg();\n    const tenant = pickTenant(req.headers.host);\n    const mode = (cfg.mode || \"test\") as \"test\" | \"live\";\n\n    const sk =\n      cfg.tenants?.[tenant]?.[mode]?.sk ||\n      cfg.tenants?.default?.[mode]?.sk || \"\";\n\n    if (!sk || !sk.startsWith(\"sk_\")) {\n      return res.status(501).json({ error: \"Stripe key not set for tenant/mode\" });\n    }\n\n    const stripe = new Stripe(sk, { apiVersion: \"2022-11-15\" });\n\n    const sku = (req.body?.sku || req.body?.productSlug || \"offer\") as string;\n\n    // Only trust client priceId when it looks like a real Stripe price\n    const reqPid = (typeof req.body?.priceId === \"string\" ? req.body.priceId : \"\");\n    const effectiveReqPid = (reqPid && reqPid.startsWith(\"price_\")) ? reqPid : \"\";\n\n    const mapped =\n      cfg.products?.[tenant]?.[sku] ||\n      cfg.products?.default?.[sku] || \"\";\n\n    const priceId = effectiveReqPid || mapped;\n\n    if (!priceId || !priceId.startsWith(\"price_\")) {\n      return res.status(400).json({ error: `No price found for sku \"${sku}\" (tenant \"${tenant}\")` });\n    }\n\n    const utm = req.body?.utm || {};\n    const persona = req.body?.persona || \"default\";\n    const BASE = process.env.BASE_URL || `http://${req.headers.host || \"localhost:3000\"}`;\n\n    const s = await stripe.checkout.sessions.create({\n      mode:\"payment\",\n      line_items:[{ price: priceId, quantity:1 }],\n      success_url:`${BASE}/thank-you?session_id={CHECKOUT_SESSION_ID}`,\n      cancel_url:`${BASE}/cancel`,\n      metadata:{...utm, persona, tenant, sku},\n      automatic_tax:{enabled:true},\n      allow_promotion_codes:true,\n      customer_creation:\"always\"\n    });\n\n    return res.json({ url: s.url });\n  }catch(e:any){\n    console.error(\"[checkout]\", e?.message||e);\n    return res.status(500).json({ error: e?.message || \"server_error\" });\n  }\n}\r\n", "\uFEFFimport type { Request, Response } from \"express\";\nimport Stripe from \"stripe\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport db, { insertEvent, hasProcessed, markProcessed } from \"./warehouse/db\";\n// If you still import routeEvent elsewhere, you can add:\n// import { routeEvent } from \"./events/router\";\n\nfunction loadCfg(){\n  const p = path.resolve(\"v2/config/stripe_config.json\");\n  let raw = fs.readFileSync(p, \"utf-8\");\n  raw = raw.replace(/^\\uFEFF/, \"\"); // strip BOM\n  return JSON.parse(raw);\n}\nfunction pickTenant(host?: string){\n  const h = (host || \"\").split(\":\")[0].toLowerCase();\n  const cfg = loadCfg();\n  return (cfg.tenants && (h in cfg.tenants)) ? h : \"default\";\n}\n\nexport async function stripeWebhook(req: Request, res: Response){\n  try{\n    const cfg = loadCfg();\n    const tenant = pickTenant(req.headers.host as string);\n    const mode = (cfg.mode || \"test\") as \"test\" | \"live\";\n    const sk = cfg.tenants?.[tenant]?.[mode]?.sk || cfg.tenants?.default?.[mode]?.sk || \"\";\n    if (!sk) return res.status(501).json({ error: \"Stripe key not set\" });\n\n    const stripe = new Stripe(sk, { apiVersion: \"2022-11-15\" });\n\n    const whsec = cfg.tenants?.[tenant]?.[mode]?.whsec || cfg.tenants?.default?.[mode]?.whsec || \"\";\n    let event: any = req.body;\n\n    if (whsec) {\n      const sig = String(req.headers[\"stripe-signature\"] || \"\");\n      event = stripe.webhooks.constructEvent(req.body as any, sig, whsec);\n    } else {\n      // express.raw gives Buffer when no whsec is configured\n      if (Buffer.isBuffer(event)) event = JSON.parse(event.toString(\"utf8\"));\n    }\n\n    // Idempotency: drop duplicates early\n    if (event && event.id && hasProcessed(event.id)) {\n      return res.json({ received: true, dedup: true });\n    }\n\n    if (event.type === \"checkout.session.completed\"){\n      const s = event.data?.object || {};\n      // If you use routeEvent, you can uncomment:\n      // routeEvent({ type:\"purchase\", uid: s?.customer || s?.id, ts: Date.now(),\n      //   payload:{ email:s?.customer_details?.email, amount_total:s?.amount_total, currency:s?.currency } });\n\n      // Persist purchase to warehouse\n      insertEvent({\n        uid: String(s?.customer || s?.id || \"\"),\n        type: \"purchase\",\n        ts: Date.now(),\n        payload: {\n          email: s?.customer_details?.email,\n          amount_total: s?.amount_total,\n          currency: s?.currency\n        }\n      });\n    }\n\n    if (event && event.id) markProcessed(event.id);\n    res.json({ received: true });\n  }catch(e:any){\n    console.error(\"[webhook]\", e?.message || e);\n    res.sendStatus(500);\n  }\n}\r\n\r\n", "\uFEFFimport Database from \"better-sqlite3\";\n\nconst db = new Database(process.env.WAREHOUSE_DB || \"warehouse.db\");\ndb.pragma(\"journal_mode = WAL\");\n\n// core events table\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS events (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    uid TEXT,\n    type TEXT,\n    ts INTEGER,\n    payload TEXT\n  );\n  CREATE INDEX IF NOT EXISTS idx_events_uid ON events(uid);\n  CREATE INDEX IF NOT EXISTS idx_events_type ON events(type);\n`);\n\n// idempotency table for webhooks\ndb.exec(`\n  CREATE TABLE IF NOT EXISTS processed_events (\n    event_id TEXT PRIMARY KEY,\n    ts INTEGER\n  );\n`);\n\nexport function insertEvent(e:{ uid:string, type:string, ts:number, payload:any }) {\n  db.prepare(\"INSERT INTO events(uid,type,ts,payload) VALUES (?,?,?,?)\")\n    .run(e.uid, e.type, e.ts, JSON.stringify(e.payload||{}));\n}\n\nexport function hasProcessed(eventId:string) {\n  return !!db.prepare(\"SELECT 1 FROM processed_events WHERE event_id=?\").get(eventId);\n}\n\nexport function markProcessed(eventId:string) {\n  db.prepare(\"INSERT OR IGNORE INTO processed_events(event_id,ts) VALUES (?,?)\")\n    .run(eventId, Date.now());\n}\n\nexport default db;\r\n", "\uFEFFimport type { Request, Response } from \"express\";\nimport Ajv2020 from \"ajv/dist/2020\";           // \u2705 draft 2020-12 engine\nimport addFormats from \"ajv-formats\";\nimport schema from \"../schemas/events.v1.json\" assert { type: \"json\" };\nimport { routeEvent } from \"./router\";\n\n// Ajv v8 configured for 2020-12\nconst ajv = new Ajv2020({ allErrors: true });\naddFormats(ajv);\nconst validate = ajv.compile(schema as any);\n\nexport async function ingest(req: Request, res: Response){\n  const data = req.body;\n  if (!validate(data)) return res.status(400).json({ ok:false, errors: validate.errors });\n  if (data.consent === \"declined\") return res.json({ ok:true, dropped:true });\n\n  try { await forwardGA4(data); } catch {}\n  try { routeEvent(data); } catch {}\n  res.json({ ok:true });\n}\n\nasync function forwardGA4(evt:any){\n  if (!process.env.GA4_API_SECRET || !process.env.GA4_ID) return;\n  const url = `https://www.google-analytics.com/mp/collect?measurement_id=${process.env.GA4_ID}&api_secret=${process.env.GA4_API_SECRET}`;\n  const body = { client_id: evt.uid || \"anon\", events: [{ name: evt.type || \"event\", params: evt.payload || {} }] };\n  await fetch(url, { method:\"POST\", headers:{ \"content-type\":\"application/json\" }, body: JSON.stringify(body) });\n}\r\n", "\uFEFF{\n  \"$schema\":\"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\":\"https://udigit.ca/schemas/events.v1.json\",\n  \"type\":\"object\",\n  \"required\":[\"type\",\"ts\"],\n  \"properties\":{\n    \"type\":{\"type\":\"string\"},\n    \"uid\":{\"type\":\"string\"},\n    \"trace_id\":{\"type\":\"string\"},\n    \"consent\":{\"type\":\"string\",\"enum\":[\"accepted\",\"declined\",\"unknown\"]},\n    \"payload\":{\"type\":\"object\",\"additionalProperties\":true},\n    \"ts\":{\"type\":\"number\"}\n  },\n  \"additionalProperties\": false\n}\r\n", "\uFEFFexport function routeEvent(e:any){\n  switch(e.type){\n    case \"lead_submit\": return sendSequence(\"lead_capture\", e);\n    case \"purchase\": return sendSequence(\"post_purchase\", e);\n    case \"nps_score\": return (e.score<=6? sendSequence(\"retention_fix\", e):sendSequence(\"advocacy\", e));\n    case \"cancel_start\": return scheduleWinback(e.uid);\n    default: return;\n  }\n}\nexport function sendSequence(name:string, e:any){ console.log(\"[sequence]\", name, e.uid||\"\"); }\nexport function scheduleWinback(uid:string){ console.log(\"[winback scheduled]\", uid); }\r\n", "\uFEFFimport fs from \"fs\"; import path from \"path\"; import Stripe from \"stripe\";\n\nfunction loadCfg(){ const p=path.resolve(\"v2/config/stripe_config.json\"); let raw=fs.readFileSync(p,\"utf-8\"); raw=raw.replace(/^\\uFEFF/,\"\"); return JSON.parse(raw); }\nfunction pickTenant(host?:string){ const h=(host||\"\").split(\":\")[0].toLowerCase(); const cfg=loadCfg(); return (h in (cfg.tenants||{}))?h:\"default\"; }\n\nexport async function thankYouJSON(req:any,res:any){\n  try{\n    const sid = String((req.query||{}).session_id||\"\");\n    if(!sid) return res.status(400).json({error:\"missing session_id\"});\n    const cfg=loadCfg(); const tenant=pickTenant(req.headers.host); const mode=(cfg.mode||\"test\");\n    const sk=cfg.tenants?.[tenant]?.[mode]?.sk || cfg.tenants?.default?.[mode]?.sk || \"\";\n    if(!sk) return res.status(501).json({error:\"Stripe key not set\"});\n    const stripe = new Stripe(sk, { apiVersion:\"2022-11-15\" });\n\n    const s = await stripe.checkout.sessions.retrieve(sid, { expand:[\"line_items\",\"customer_details\"] });\n    const out = {\n      id: s.id,\n      email: s.customer_details?.email || null,\n      amount_total: s.amount_total,\n      currency: s.currency,\n      payment_status: s.payment_status,\n      line_items: (s.line_items?.data||[]).map(i=>({ desc: i.description, qty: i.quantity, amount_subtotal: i.amount_subtotal }))\n    };\n    res.json(out);\n  }catch(e:any){ console.error(\"[thankyou]\", e?.message||e); res.status(500).json({error:\"server_error\"}); }\n}\r\n"],
  "mappings": "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",
  "names": ["import_path", "helmet", "path", "fs", "Stripe", "import_stripe", "import_fs", "import_path", "Database", "loadCfg", "path", "fs", "pickTenant", "Stripe", "Ajv2020", "addFormats", "import_fs", "import_path", "import_stripe", "loadCfg", "path", "fs", "pickTenant", "Stripe", "express", "fs", "cors", "morgan", "bodyParser", "path"]
}
